{"version":3,"sources":["Layouts/index.js","Views/index.js","Utils/Validation/index.js","services/GetItemService.js","services/GetCommonService.js","services/PostService.js","Helper/SnackbarAlert/index.js","Helper/ImportExcelDialog/ProgressBarWithPercentage/ProgressBarWithPercentage.js","Images/Sample_File.xls","Helper/ImportExcelDialog/index.js","Utils/Converstion/index.js","Helper/CustomAutocomplete/index.js","Helper/CustomConfirmDialog/index.js","services/GetSalesService.js","Views/AddItem/index.js","Views/Login/index.js","Views/test/index.js","routes.js","Theme/index.js","Theme/shadows.js","Theme/typography.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","height","overflow","width","wrapper","flex","contentContainer","content","MainLayout","classes","className","Home","useEffect","sessionStorage","setItem","JSON","stringify","window","location","hostname","proxyUrl","url","protocol","Fragment","Container","Box","textAlign","Typography","variant","style","fontWeight","marginTop","Button","endIcon","size","background","color","textTransform","Grid","container","spacing","item","xs","sm","md","lg","Card","boxShadow","CardContent","IconButton","padding","fontSize","parseDoubleTwoDecimal","amt","parseFloat","toFixed","dateFormat","value","format","moment","isNumber","evt","charCode","event","which","keyCode","preventDefault","myHeaders","getItem","getCategoriesItems","productType","Promise","resolve","reject","URL_REGISTER","fetch","method","headers","then","Response","json","FindResponse","error","getSubCategories","category","getItemByNumber","itemNumber","postItem","data","body","res","catch","console","FindResponseItem","undefined","status","length","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","useStyles1","green","backgroundColor","palette","dark","lightBlue","icon","iconVariant","opacity","marginRight","message","alignItems","messageBody","iconClose","MySnackbarContentWrapper","props","onClose","other","Icon","SnackbarContent","clsx","id","action","onClick","CustomizedSnackbars","React","useState","open","setOpen","severity","position","handleClose","reason","toastClickHandle","Slide","direction","in","mountOnEnter","unmountOnExit","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","createMuiTheme","primary","typography","useNextVariants","LinearDeterminate","LinearProgress","count","margin","input","ImportExcelDialog","fileName","setFileName","postDataCount","setPostDataCount","showProgress","setShowProgress","viewButton","setViewButton","readData","rowData","totalRows","a","countPostItem","columns","toString","parseInt","log","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","href","SampleFile","download","DialogContent","type","accept","onChange","fileObj","target","files","name","ExcelRenderer","resp","totalRow","rows","row","e","htmlFor","marginLeft","component","startIcon","Math","ceil","propsHandleImport","memo","productionTypeToSever","filter","createFilterOptions","options","unit","margin_width","CustomAutocomplete","forwardRef","ref","setting","array","defaultValue","setValue","useImperativeHandle","handleClear","Autocomplete","newValue","inputValue","filterOptions","params","filtered","arrayName","push","subcategory","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","freeSolo","renderInput","TextField","label","onBlur","CustomConfirmDialog","keepMounted","lable","handleDialog","shopifyHeaders","postShopifyItem","UOM","main","AddItem","prefSettings","parse","currentLocation","localStorage","alertSnackBar","componentDidMount","fetchData","fetchCategories","getLocationDetails","setLocation","fetchTaxData","getTaxDetails","getTax","getCategoriesItemsDetails","setCategoriesData","fetchSubCategories","getSubCategoriesDetails","setSubCategoriesData","setState","categoryAll","categories","subCategoryAll","items","inventory_locations","locationArray","taxArray","vatcode","reverse","posAddItem","addDisabled","state","trim","itemCode","checkedTrackInv","itemName","itemName2nd","itemDetail","uom","vatCode1","vatCode2","vatCode3","vatCode4","p_vatCode1","p_vatCode2","p_vatCode3","p_vatCode4","sellingPrice","wholesalePrice","maxDiscount","selectedValueMax","defaultDiscount","selectedValueDefault","purchasePrice","expiryDate","quantity","reorderQuantity","response","showAlertMessage","clear_values","getVatCodeRates","taxDataSales","CurrencyType","generateTaxCode","toUpperCase","taxDataPurchase","taxGroup","taxType","i","vatcodeDesc","vatcode_desc","vatCode","radioChangeMax","currentTarget","radioChangeDefault","toggleMenu","prevState","showWarning","handleClickOpenClearDialog","clearDialog","handleCloseClearDialog","handleClickOpenVat","vat","getAllTax","handleCloseVat","handleOk","handleChange","categoryChange","subCategoryChange","handleChangeCheckBox","checked","searchByNum","autoNumber","handleAddItem","checkPurchasePrice","checkReorderQty","allowTax","checkDiscount","checkExpiryDate","confirmDialog","caller","maxDiscountType","Date","qty","reorderQty","customAutoCompleteRef","current","customAutoCompleteRefCat","propsCloseToast","openSnackBar","propsHeaderDrawerClick","toggleDrawer","propsHelpHandleClick","welcomeDialog","welcomeDialogClose","propsEducationHandleClick","educationDialog","educationDialogClose","openExcelPopup","openExcel","closeExcelPopup","history","closeConfirmDialog","createRef","industryType","LocationArray","valueTax","pref","this","contentShift","subscription","float","overflowX","visibility","FormControlLabel","disabled","control","Checkbox","track_with_inventory_less","track_with_inventory","required","autoComplete","inputType","autoFocus","allowDualLanguagePrint","floatingLabelText","onKeyPress","select","SelectProps","native","MenuProps","menu","map","buttonMore","button","bind","button_cancel","margin_radio","Radio","InputLabelProps","shrink","location_id","location_desc","vat_rate","vatcode_group","margin_width_detail","inputProps","maxLength","Component","withStyles","flexWrap","flexGrow","transition","transitions","create","easing","sharp","duration","leavingScreen","easeOut","enteringScreen","paper","flexDirection","avatar","secondary","form","submit","LogIn","CssBaseline","Avatar","noValidate","fullWidth","marginBottom","Test","configPhoneTextfield","placeholder","defaultCountry","geoplugin_countryCode","international","countryCallingCodeEditable","onchange","geoplugin_countryName","geoplugin_currencyCode","geoplugin_currencySymbol_UTF8","routes","path","element","children","default","colors","common","white","text","blueGrey","shadows","h1","letterSpacing","h2","h3","h4","h5","h6","overline","App","routing","useRoutes","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.477d2f39.chunk.js","sourcesContent":["import React from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    height: '100%',\n    overflow: 'hidden',\n    width: '100%'\n  },\n  wrapper: {\n    display: 'flex',\n    flex: '1 1 auto',\n    overflow: 'hidden',\n    // paddingTop: 64\n  },\n  contentContainer: {\n    display: 'flex',\n    flex: '1 1 auto',\n    overflow: 'hidden'\n  },\n  content: {\n    flex: '1 1 auto',\n  }\n}));\n\nconst MainLayout = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.wrapper}>\n        <div className={classes.contentContainer}>\n          <div className={classes.content}>\n            <Outlet />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainLayout;\n","import React, { useEffect } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Container,\n    Grid,\n    IconButton,\n    Typography,\n} from \"@material-ui/core\";\nimport VideoCallIcon from \"@material-ui/icons/VideoCall\";\nimport Icon1 from \"@material-ui/icons/Loyalty\";\nimport Icon2 from \"@material-ui/icons/RadioButtonChecked\";\nimport Icon3 from \"@material-ui/icons/Redeem\";\nimport Icon4 from \"@material-ui/icons/Cancel\";\nimport Icon5 from \"@material-ui/icons/MonetizationOn\";\n\nconst Home = () => {\n    useEffect(() => {\n        sessionStorage.setItem('user_id', 'M10@gmail.com');\n        sessionStorage.setItem('base_url_gql', 'http://ondev.kaleapps.com');\n        sessionStorage.setItem('prefSettings', JSON.stringify({\"CurrencyType\":\"slr\",\"industryType\":\"102\",\"printerType\":\"80mm\",\"itemDiscount\":true,\"wholesalePrice\":true,\"autoNumber\":true,\"chequesAlertPeriod\":\"0\",\"expiryAlertPeriod\":\"0\",\"selectedPrintStyle\":\"0\",\"sendReceiptMethod\":\"1\",\"selectedLanguage\":\"001\",\"selectedTaxType\":\"0\",\"receiptImage\":false,\"printerAutocut\":false,\"itemPicture\":false,\"editSellingPrice\":true,\"shortKeyStyle\":\"0\",\"itemAutoEntry\":true,\"allowOrderConfirm\":false,\"orderConfPopup\":true,\"allowDualLanguagePrint\":true,\"allowMultiPrinters\":false,\"salesNoInventory\":true,\"holdOrderDelete\":false,\"splitPayment\":true,\"orderDiscount\":true,\"serviceCharge\":true,\"serviceChargePct\":10,\"batchIdPopup\":true,\"allowIMEI\":false,\"allowTax\":false,\"allowLoyalty\":false,\"allowProduction\":true,\"allowItemCombo\":false,\"allowCostingMethod\":\"LIFO\",\"allowTog\":true,\"subscription\":\"KOPP\",\"lotto\":0,\"lotto_winning\":0,\"lottery\":0,\"lottery_winning\":0}));\n        sessionStorage.setItem(\"companyInfo\", JSON.stringify([{\"company_description\":\"n/l\",\"store_address\":\"n/l\",\"industry\":\"shop\",\"company_message\":\" ------------------IMPORTANT NOTICE-----------------           \\nIN CASE OF A PRICE DISCREPANCY, RETURN THE ITEM & BILL WITHIN 4 DAYS TO REFUND THE DIFFERENCE. *************************************************** PLEASE CALL OUR HOTLINE FOR YOUR VALUED SUGGESTIONS AND COMMENTS *************************************************** THANK YOU! COME AGAIN!\",\"last_updated\":\"2021-08-01T06:12:57Z\",\"created\":\"2021-03-12T03:32:52Z\",\"company_name\":\"Sharan Multi\",\"company_address\":\"Nelliady\",\"company_id\":\"bYfo2AU2BENhRhRnfLim\",\"contact_name\":\"n/l\",\"client_id\":\"eVG5vocCbjSehQuYYePO1ZdMkosoZtyFynmxo7nY\",\"company_no\":\"0777123456\"}]))\n        sessionStorage.setItem(\"authorization\", \"GZyqJDD36t4y336Pti3Bm4QQUxDygYWI9Yybvmdut4Bhv6NrkpM7Gje8WpQhy01XGYkYe3FKfbs\")\n        sessionStorage.setItem(\"company_id\", \"bYfo2AU2BENhRhRnfLim\")\n        sessionStorage.setItem(\"user_designation\", \"ADMIN\")\n        sessionStorage.setItem(\"base_url\", \"http://ondev.kaleapps.com\")\n        sessionStorage.setItem(\"client_id\", \"eVG5vocCbjSehQuYYePO1ZdMkosoZtyFynmxo7nY\")\n\n        if (window.location.hostname === \"localhost\") {\n            let proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n            sessionStorage.setItem(\n              \"base_url\",\n              proxyUrl + \"http://csdev.kaleapps.com:3000\"\n            );\n            sessionStorage.setItem(\n              \"base_url_gql\",\n              proxyUrl + \"http://gsdev.kaleapps.com:3000\"\n            );\n          } else {\n            let url = window.location.protocol + \"//\" + window.location.hostname;\n            sessionStorage.setItem(\"base_url\", url);\n            sessionStorage.setItem(\"base_url_gql\", url);\n          }\n    })\n\n    return (\n        <React.Fragment>\n            <Container>\n                <Box textAlign=\"center\">\n                    <Typography\n                        variant=\"h6\"\n                        style={{\n                            fontWeight: \"bold\",\n                            marginTop: 25,\n                        }}\n                    >\n                        👋 Welcome to Kale!\n                    </Typography>\n                    <Typography style={{ marginTop: 10 }}>\n                        Integate item, order to kale\n                        <br />\n                        {''}\n                    </Typography>\n                    <Button\n                        variant=\"contained\"\n                        endIcon={<VideoCallIcon />}\n                        size=\"small\"\n                        style={{\n                            marginTop: 15,\n                            background: \"#7280D1\",\n                            color: \"white\",\n                            textTransform: \"none\",\n                        }}\n                    >\n                        See How to Setup\n                    </Button>\n                </Box>\n                <Grid container spacing={3} style={{ marginTop: 10 }}>\n                    <Grid item xs={12} sm={12} md={6} lg={4}>\n                        <Card style={{ boxShadow: \"0 0 1px black\" }}>\n                            <CardContent>\n                                <Box style={{ display: \"flex\" }}>\n                                    <Box style={{ flex: 2 }}>\n                                        <IconButton\n                                            style={{\n                                                background: \"#D9E1FF\",\n                                                color: \"#3F77F1\",\n                                                padding: 15,\n                                            }}\n                                        >\n                                            <Icon1 style={{ fontSize: 30 }} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box style={{ flex: 7 }}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            style={{ fontWeight: \"bold\" }}\n                                        >\n                                            Add item\n                                        </Typography>\n                                        <Typography\n                                            variant=\"body2\"\n                                            style={{ marginTop: 8 }}\n                                        >\n                                            Add item on shopify\n                                        </Typography>\n                                        <Button\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            style={{\n                                                background: \"white\",\n                                                marginTop: 10,\n                                                textTransform: 'none'\n                                            }}\n                                        >\n                                            + Add\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={6} lg={4}>\n                        <Card style={{ boxShadow: \"0 0 1px black\" }}>\n                            <CardContent>\n                                <Box style={{ display: \"flex\" }}>\n                                    <Box style={{ flex: 2 }}>\n                                        <IconButton\n                                            style={{\n                                                background: \"#FEF3DD\",\n                                                color: \"#EDBF60\",\n                                                padding: 15,\n                                            }}\n                                        >\n                                            <Icon2 style={{ fontSize: 30 }} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box style={{ flex: 7 }}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            style={{ fontWeight: \"bold\" }}\n                                        >\n                                            Create Order\n                                        </Typography>\n                                        <Typography\n                                            variant=\"body2\"\n                                            style={{ marginTop: 8 }}\n                                        >\n                                            Create order on shopify\n                                        </Typography>\n                                        <Button\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            style={{\n                                                background: \"white\",\n                                                marginTop: 10,\n                                                textTransform: 'none'\n                                            }}\n                                        >\n                                            + Create\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={6} lg={4}>\n                        <Card style={{ boxShadow: \"0 0 1px black\" }}>\n                            <CardContent>\n                                <Box style={{ display: \"flex\" }}>\n                                    <Box style={{ flex: 2 }}>\n                                        <IconButton\n                                            style={{\n                                                background: \"#FCE7EE\",\n                                                color: \"#F590B7\",\n                                                padding: 15,\n                                            }}\n                                        >\n                                            <Icon3 style={{ fontSize: 30 }} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box style={{ flex: 7 }}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            style={{ fontWeight: \"bold\" }}\n                                        >\n                                            Cashback\n                                        </Typography>\n                                        <Typography\n                                            variant=\"body2\"\n                                            style={{ marginTop: 8 }}\n                                        >\n                                            Create cashback on shopify\n                                        </Typography>\n                                        <Button\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            style={{\n                                                background: \"white\",\n                                                marginTop: 10,\n                                                textTransform: 'none'\n                                            }}\n                                        >\n                                            + Create\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    {/*<Grid item xs={12} sm={12} md={6} lg={4}>\n                        <Card style={{ boxShadow: \"0 0 1px black\" }}>\n                            <CardContent>\n                                <Box style={{ display: \"flex\" }}>\n                                    <Box style={{ flex: 2 }}>\n                                        <IconButton\n                                            style={{\n                                                background: \"#DEF4DD\",\n                                                color: \"#62CB5B\",\n                                                padding: 15,\n                                            }}\n                                        >\n                                            <Icon4 style={{ fontSize: 30 }} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box style={{ flex: 7 }}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            style={{ fontWeight: \"bold\" }}\n                                        >\n                                            Custom Fixed Value Discounts\n                                        </Typography>\n                                        <Typography\n                                            variant=\"body2\"\n                                            style={{ marginTop: 8 }}\n                                        >\n                                            Offer certain fixed value discounts\n                                            to UPSELL and products in your\n                                            store.\n                                        </Typography>\n                                        <Button\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            style={{\n                                                background: \"white\",\n                                                marginTop: 10,\n                                                textTransform: 'none'\n                                            }}\n                                        >\n                                            + Create\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Grid>*/}\n                    {/*<Grid item xs={12} sm={12} md={6} lg={4}>\n                        <Card style={{ boxShadow: \"0 0 1px black\" }}>\n                            <CardContent>\n                                <Box style={{ display: \"flex\" }}>\n                                    <Box style={{ flex: 2 }}>\n                                        <IconButton\n                                            style={{\n                                                background: \"#E4E0FF\",\n                                                color: \"#8071FF\",\n                                                padding: 15,\n                                            }}\n                                        >\n                                            <Icon5 style={{ fontSize: 30 }} />\n                                        </IconButton>\n                                    </Box>\n                                    <Box style={{ flex: 7 }}>\n                                        <Typography\n                                            variant=\"body1\"\n                                            style={{ fontWeight: \"bold\" }}\n                                        >\n                                            No Discount\n                                        </Typography>\n                                        <Typography\n                                            variant=\"body2\"\n                                            style={{ marginTop: 8 }}\n                                        >\n                                            Showcase certain products from your\n                                            store for maximum visibility without\n                                            any discounts.\n                                        </Typography>\n                                        <Button\n                                            variant=\"outlined\"\n                                            size=\"small\"\n                                            style={{\n                                                background: \"white\",\n                                                marginTop: 10,\n                                                textTransform: 'none'\n                                            }}\n                                        >\n                                            + Create\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Grid>*/}\n                </Grid>\n            </Container>\n        </React.Fragment>\n    );\n};\n\nexport default Home;","import moment from \"moment\";\n\nexport const getLocalFromUTCDate = (utcDate) =>{\n    if(utcDate){\n        let localDate = new Date(utcDate);\n    return moment(localDate).format(\"DD-MM-YYYY HH:mm\");\n    } else{\n        return '-';\n    }\n}\n\nexport const getPostTimeFormat = () => {\n    let date = new Date();\n    let h = `${date.getHours()}`.padStart(2, \"0\");\n    let m = `${date.getMinutes()}`.padStart(2, \"0\");\n    let s = `${date.getSeconds()}`.padStart(2, \"0\");\n\n    return h + \":\" + m + \":\" + s;\n};\n\nexport const refreshTime = (utcDate) => {\n    let localDate = new Date(utcDate);\n    return moment(localDate).format(\"DD-MM-YYYY hh:mm A\");\n}\n\nexport const startEndDayOfYear = (today) => {\n    const year = [];\n    year[0] = today.getFullYear() + '-01-01';\n    year[1] = today.getFullYear() + '-12-31';\n\n    return year;\n}\n\nexport const decimalFormat = (value) => {\n    return  parseFloat(value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport const reverseDecimalFormat = (value) => {\n    return  parseFloat(value.replace(/,/g, ''));\n\n}\n\nexport const parseDoubleTwoDecimal = (amt) => {\n    return parseFloat(parseFloat(amt).toFixed(2));\n}\n\nexport const localToUtc = (localDate) =>  {\n    return new Date(localDate).toISOString();\n}\n\nexport const getEndTrailDate = (date,month) => {\n    return new Date(date.setMonth(date.getMonth()+month)).toISOString();\n}\n\nexport const getLocalFromUTCDateExport = (utcDate) => {\n    let localDate = new Date(utcDate);\n    return moment(localDate).format(\"MM-DD-YYYY HH:mm\");\n\n}\n\nexport const dateFormat = (value,style = 1) => {\n    let format;\n    switch (style) {\n        case 1 :\n            format = moment(value).format(\"DD-MM-YYYY\");\n            break;\n        case 2 :\n            format = moment(value).format(\"YYYY-MM-DD\");\n            break;\n    }\n   return format;\n}\n\nexport const getServerDateFromLocalDate = (period) => {\n    const date = [];\n    const  todayDate = moment(new Date()).format('YYYY-MM-DD');\n    switch(period){\n        case \"Today\":\n            date[0] = new Date(todayDate +'T00:00:00').toISOString();\n            date[1] = new Date(todayDate +'T23:59:59').toISOString();\n            date[2] = \"Today\";\n            break;\n        case \"Yesterday\":\n            const yesterdayDate = moment(new Date()).subtract(1, 'days').format('YYYY-MM-DD');\n            date[0] = new Date(yesterdayDate +'T00:00:00').toISOString();\n            date[1] = new Date(yesterdayDate +'T23:59:59').toISOString();\n            date[2] = \"Yesterday\";\n            break;\n        case \"Weekly\":\n            const weekly = moment(new Date()).subtract(6, 'days').format('YYYY-MM-DD');\n            date[0] = new Date(weekly +'T00:00:00').toISOString();\n            date[1] = new Date(todayDate +'T23:59:59').toISOString();\n            date[2] = \"Weekly\";\n            break;\n        case \"TwoWeekly\":\n            const twoWeekly = moment(new Date()).subtract(12, 'days').format('YYYY-MM-DD');\n            date[0] = new Date(twoWeekly +'T00:00:00').toISOString();\n            date[1] = new Date(todayDate +'T23:59:59').toISOString();\n            date[2] = \"TwoWeekly\";\n            break;\n        case \"Monthly\":\n            const sm = moment().startOf('month').format('YYYY-MM-DD');\n            const em =  moment().endOf('month').format('YYYY-MM-DD');\n            date[0] = new Date(sm +'T00:00:00').toISOString();\n            date[1] = new Date(em +'T23:59:59').toISOString();\n            date[2] = \"Monthly\";\n            break;\n        case \"LastMonth\":\n            const lsm = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');\n            const lem = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');\n            date[0] = new Date(lsm +'T00:00:00').toISOString();\n            date[1] = new Date(lem +'T23:59:59').toISOString();\n            date[2] = \"LastMonth\";\n            break;\n        case \"Yearly\":\n            const ysm = moment().startOf('year').format('YYYY-MM-DD');\n            const yem =  moment().endOf('year').format('YYYY-MM-DD');\n            date[0] = new Date(ysm +'T00:00:00').toISOString();\n            date[1] = new Date(yem +'T23:59:59').toISOString();\n            date[2] = \"Yearly\";\n            break;\n    }\n\n    return date;\n}\n\nexport const getLocalToUTC = (today) => {\n    const date = [];\n    let  todayDate = moment(today).format('YYYY-MM-DD');\n\n    date[0] = new Date(todayDate +'T00:00:00').toISOString();\n    date[1] = new Date(todayDate +'T23:59:59').toISOString();\n\n    return date;\n}\n\nexport const getBeforeCashierName = (str) => {\n    return str.split(\"@\")[0];\n    /* This splits the string into an array using the \"+\"\n       character as a delimiter.\n       Then it gets the first element of the split string.\n    */\n}\n\nexport const hiddenNavBar = (pathName) => {\n    switch (pathName) {\n        case '/sales/createsales' :\n            return false;\n        case '/sales/createsalesreturn' :\n            return false;\n        case '/sales/createquotation' :\n            return false;\n        case '/inventory/createinventory' :\n            return false;\n        case '/inventory/createinventoryreturn' :\n            return false;\n        case '/inventory/createpurchaseorder' :\n            return false;\n        case '/add/tog' :\n            return false;\n        case '/manufacture/createitembom' :\n            return false;\n        case '/manufacture/createworkorder' :\n            return false;\n        case '/manufacture/createitemcombo' :\n            return false;\n        default :  return true;\n    }\n}\n\nexport const hiddenIconNavBarSales = (pathName) => {\n    switch (pathName) {\n        case '/sales/createsales' :\n            return false;\n        case '/inventory/createinventory' :\n            return false;\n        case '/inventory/createinventoryreturn' :\n            return false;\n        case '/sales/createsalesreturn' :\n            return false;\n        case '/inventory/createpurchaseorder' :\n            return false;\n        case '/inventory/createpurchaseinvoice' :\n            return false;\n        case '/add/tog' :\n            return false;\n        case '/manufacture/createitembom' :\n            return false;\n        case '/manufacture/createworkorder' :\n            return false;\n        case '/manufacture/createitemcombo' :\n            return false;\n        default :  return true;\n    }\n}\n\nexport const numOnlyRegExp = () => {\n    return  /^[0-9\\b]+$/;\n}\n\nexport const isNumber = (evt) => {\n    evt = (evt) ? evt : window.event;\n    let charCode = (evt.which) ? evt.which : evt.keyCode;\n    if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {\n        evt.preventDefault();\n    } else {\n        return true;\n    }\n}\n\nexport const  sliceName = (input,Characters) => input.length > Characters ? `${input.slice(0, Characters)}...` : input;\n\nexport const  animateValue = (obj, start, end, duration) => {\n    let startTimestamp = null;\n    const step = (timestamp) => {\n        if (!startTimestamp) startTimestamp = timestamp;\n        const progress = Math.min((timestamp - startTimestamp) / duration, 1);\n        obj.innerHTML = Math.floor(progress * (end - start) + start);\n        if (progress < 1) {\n            window.requestAnimationFrame(step);\n        }\n    };\n    window.requestAnimationFrame(step);\n}\n\nexport const stringSplit = (str,splitBy) => {\n    return str.split(splitBy);\n}\n\nexport const createLocObj = (location) => {\n    let locObj= [];\n    for (const loc of location){\n        if(loc.label !== \"All\" && loc.label !== ''){\n            locObj.push(loc)\n        }\n    }\n    return locObj;\n}\n\nconst comparer = (otherArray) => {\n    return function(current){\n        return otherArray.filter(function(other){\n            return other.item_number == current.item_number\n                && other.bid == current.bid;\n        }).length == 0;\n    }\n}\n\nexport const compereInvHoldAndNew = (holdArray, orderArray) => {\n    return {removeItemArray:holdArray.filter(comparer(orderArray))}\n}\n\n//todo sir need change\nexport const compereHoldAndOrder = (holdArray, orderArray) => {\n    let onlyInHold = holdArray.filter(comparer(orderArray));\n    let onlyInOrder = orderArray.filter(comparer(holdArray));\n    let addItemArray = []\n    let removeItemArray = []\n\n    if(onlyInHold.length === 0 && onlyInOrder.length === 0){\n\n        const qtyArray = addOrMinusQtyInHold(holdArray,orderArray);\n\n        addItemArray = qtyArray.addQtyArray;\n        removeItemArray = qtyArray.removeQtyArray;\n\n    }\n    else if(onlyInHold.length > 0 || onlyInOrder.length > 0){\n        removeItemArray = onlyInHold;\n        addItemArray = onlyInOrder;\n        for(let hold of onlyInHold){\n            holdArray = [...holdArray].splice(holdArray.indexOf(hold),1);\n        }\n\n        for(let order of onlyInOrder){\n            orderArray.splice(orderArray.indexOf(order),1);\n        }\n\n        let qtyArray = addOrMinusQtyInHold(holdArray,orderArray);\n\n        for(let qty of qtyArray.addQtyArray){\n            addItemArray.push(qty)\n        }\n\n        for(let qty of qtyArray.removeQtyArray){\n            removeItemArray.push(qty)\n        }\n\n    }\n    return {addArray:addItemArray, removeArray:removeItemArray}\n}\n\n\nconst addOrMinusQtyInHold = (holdDetailsArray,orderArray) => {\n    const addQtyArray = [];\n    const removeQtyArray = []\n\n    for(let orderItem of orderArray){\n        for(let holdItem of holdDetailsArray){\n            if(orderItem.item_number === holdItem.item_number && orderItem.bid === holdItem.bid){\n                if(orderItem.qty !== holdItem.qty){\n                    if(orderItem.qty > holdItem.qty){\n                        orderItem.qty = orderItem.qty - holdItem.qty;\n                        addQtyArray.push(orderItem)\n                    }else{\n                        orderItem.qty = orderItem.qty - holdItem.qty;\n                        addQtyArray.push(orderItem)\n                    }\n\n                }\n                else{\n                    if(orderItem.item_discount !== holdItem.item_discount){\n                        orderItem.qty = 0 // kk\n                        addQtyArray.push(orderItem)\n                    }\n                }\n            }\n        }\n    }\n    return {addQtyArray:addQtyArray,removeQtyArray:removeQtyArray};\n}\n\n\nexport const getLocalFromUTCDateOnly = (utcDate) => {\n    let localDate = new Date(utcDate);\n    return moment(localDate).format(\"DD-MM-YYYY\");\n\n}\n\nexport const getLocalFromUTCTimeOnly = (utcDate) => {\n    let localDate = new Date(utcDate);\n    return moment(localDate).format(\"HH:mm\");\n\n}\n\nexport const dateDiff = (first, second) =>  {\n// Take the difference between the dates and divide by milliseconds per day.\n// Round to nearest whole number to deal with DST.\n    return Math.round((second-first)/(1000*60*60*24));\n}\n\nexport const  parseDate = (str) => {\n    let mdy = str.split('-');\n    //new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])\n    return new Date(mdy[0], mdy[1]-1, mdy[2]);\n}\n\nexport const parsePaymentDate = (str) =>  {\n    let mdy = str.split('-');\n    //new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])\n    return new Date(mdy[2], mdy[1]-1, mdy[0]);\n}\n\nexport const dateFormatShow = (date) => {\n    let showDate;\n    if(date !== \"n/l\" && date !== null){\n        showDate = moment(date).format(\"DD-MM-YYYY\")\n    }\n    else {\n        showDate = \"n/l\"\n    }\n\n    return showDate;\n}\n\nexport const checkDiscountType = (discountType) => {\n    let type = discountType;\n    let value = '';\n\n    if(type === 0){\n        value = \"%\"\n    }\n    else {\n        value = \".00\"\n    }\n\n    return value;\n}\n\nexport const getTimeZone = () => {\n    return new Date().toTimeString().slice(9).split(' ')[0]\n}\n","\nfunction myHeaders (){\n    const headers = {\n        'user_id':sessionStorage.getItem('user_id'),\n        'company_id':sessionStorage.getItem('company_id'),\n        'client_id':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n    };\n    return headers;\n}\n\n\nlet  getReorderCount = (locId) => {\n    return new Promise((resolve,reject)=>{\n        const endpoint = sessionStorage.getItem('base_url_gql')+'/graphql';\n\n        const query = /* GraphQL */`\n        query  ReOrderItemCount(\n        $client : String!,\n        $userId : String!,\n        $auth : String!,\n        $comId : String!,\n        $location : String,\n       )\n        {\n        ReOrderItemCount(\n        client_id: $client,\n        company_id: $comId,\n        auth_id: $auth,\n        user_id: $userId,\n        location_id: $location,\n        )\n       {\n         count\n       }\n     }`;\n\n        const variables = {\n            client: sessionStorage.getItem('client_id'),\n            userId: sessionStorage.getItem('user_id'),\n            auth: sessionStorage.getItem('authorization'),\n            comId: sessionStorage.getItem('company_id'),\n            location: locId,\n\n        };\n\n        fetch(endpoint, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query, variables })\n        })\n            .then(response => response.json())\n            .then(\n                (FindResponse) => {\n                    resolve(FindResponse.data.ReOrderItemCount.count);\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n\n            .catch((e) => {\n                reject(0.00)\n            })\n\n    });\n\n};\n\nlet  getStockValueSalesWise = (location) => {\n    return new Promise((resolve,reject)=>{\n        const endpoint = sessionStorage.getItem('base_url_gql')+'/graphql';\n\n        const query = /* GraphQL */`\n        query  TotalSalesValue(\n        $client : String!,\n        $userId : String!,\n        $auth : String!,\n        $comId : String!,\n        $location : String,\n        )\n            {\n            TotalSalesValue(\n            client_id: $client,\n            company_id: $comId,\n            auth_id: $auth,\n            user_id: $userId,\n            location_id: $location,\n            \n            )\n        {\n            total\n        }\n        }`;\n\n        const variables = {\n            client: sessionStorage.getItem('client_id'),\n            userId: sessionStorage.getItem('user_id'),\n            auth: sessionStorage.getItem('authorization'),\n            comId: sessionStorage.getItem('company_id'),\n            location: location,\n        };\n\n        fetch(endpoint, {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query, variables })\n        })\n            .then(response => response.json())\n            .then(\n                (FindResponse) => {\n                    if (FindResponse.data.TotalSalesValue.total !== null){\n                    resolve(FindResponse);\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n\n            .catch((e) => {\n                reject(0.00)\n            })\n\n    });\n\n};\n\nlet getAllBasicItems = (location,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n\n\n        // let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/item/items/summary?page_limit='+limit+'&&&location_id='+location+'&&&type=%5E(%3F!M%24).*%24&&&page_offset='+offset+'&&&&&';\n        //todo canada lotto and lottery\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items/summary?page_limit='+count+'&&&location_id='+location+'&&&type=M|I|P|S|T|U|V|W|X|Y|Z|F&&page_offset='+index+'&&&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getItemByProductType = (type, callingFrom) => {\n    return new Promise((resolve,reject) => {\n\n\n        // let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/item/items/summary?page_limit='+limit+'&&&location_id='+location+'&&&type=%5E(%3F!M%24).*%24&&&page_offset='+offset+'&&&&&';\n        //todo canada lotto and lottery\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items?type='+type+'&&&&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getAllManufactureItems = (location,type,index,count,) => {\n    return new Promise((resolve,reject) => {\n\n        // let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items/summary?page_limit='+count+'&&&location_id='+location+'&&&type=M&&&page_offset='+index+'&&&&&';\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items/summary?page_limit='+count+'&&&location_id='+location+'&&type='+type+'&&page_offset='+index+'&&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\n\nlet getAllItems = (location,type,category,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n        // let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventories?page_limit='+count+'&&location_id='+location+'&&type='+type+'&&page_offset='+index+'&&&&';\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventories?page_limit='+count+'&&location_id='+location+'&&type='+type+'&&page_offset='+index+'&category='+category+'&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.inventories && FindResponse.inventories.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getAllItemsSummary = (location,type,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items/summary?page_limit='+count+'&&&location_id='+location+'&&type='+type+'&&&page_offset='+index+'&&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items && FindResponse.items.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet itemByCategory = (limit,offset,location,category) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/item/items/summary?page_limit='+limit+'&&location_id='+location+'&&&&&&page_offset='+offset+'&&category='+category+'&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items && FindResponse.items.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet itemBySubcategory = (limit,offset,location,category,subcategory) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/item/items/summary?page_limit='+limit+'&&location_id='+location+'&&&&&&page_offset='+offset+'&&category='+category+'&subcategory='+subcategory+'&&'\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items && FindResponse.items.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getInvItemDetails = (itemNumber,itemBid,location) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/inv/item/inventory/'+itemNumber+'/'+itemBid+'?location_id='+location;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.item && FindResponse.item.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\n\nlet getAllInventoryItemSearch = (searchWord,location) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventories/number-desc/'+searchWord+'?location_id='+location;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.item && FindResponse.item.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet ItemInventoryCount = (location) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/rpt/items/total-inventories/count/loc?type=M|I|P|S|T|U|V|W|X|Y|Z&location_id='+location;\n\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items && FindResponse.items.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet ItemCount = (location) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/rpt/items/total-items?location_id='+location;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items && FindResponse.items.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getCategoriesItems = (productType,location) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/cat/categories?type='+productType+'&location_id='+location;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getSubCategories = (productType,location,category) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/cat/subcategories?type='+productType+'&location_id='+location+'&category='+category;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet getCategoriseWiseItems = (category) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventories?category='+category+'&&&';\n\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\nlet isExitsInventoryItem = (itemNumber,salesPrice,locationId,expiryDate) => {\n    return new Promise((resolve, reject) => {\n        let exitsUrl;\n\n        if(expiryDate !== 'n/l' &&  expiryDate !== null && expiryDate !== \"Invalid date\" && expiryDate !== undefined){\n            exitsUrl = sessionStorage.getItem('base_url') + '/api/inv/item/inventory/exits/by/'+ salesPrice\n                +'?location_id='+ locationId +'&item_number=%5E'+ itemNumber +'%24&expiry_date='+expiryDate;\n        }\n        else{\n            exitsUrl = sessionStorage.getItem('base_url') + '/api/inv/item/inventory/exits/by/'+ salesPrice\n                +'?location_id='+ locationId +'&item_number=%5E'+ itemNumber +'%24&';\n        }\n\n        fetch(exitsUrl,{\n            method: 'GET',\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.item){\n                    resolve(FindResponse.item)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                })\n\n    });\n\n};\n\n\nlet getFindInventoryItem = (searchWord,isNum) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER;\n        if(isNum){\n            URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventory/'+searchWord;\n        }\n        else {\n            // URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventories/number-desc/%5E'+searchWord+'%24';\n            URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventories/number-desc/'+searchWord;\n        }\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.item ){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\nlet getReorderByNumberAndSupplier = (itemNumber,location_id,supplier,index,count,) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/reorder?page_limit='+count+'&location_id='+location_id+'&supplier_name='+supplier+'&page_offset='+index+'&&&&item_number='+itemNumber;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items && FindResponse.items.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\n\nlet getItemByNumber = (itemNumber) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/item/'+itemNumber;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\nlet getItemByNumberBid = (itemNumber,itemBid) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/item/'+itemNumber+'/'+itemBid;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\nlet getItemInvByNumber = (itemNumber,location) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/item/inventory/'+itemNumber+'?location_id='+location;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\nlet getFindSummaryItem = (searchWord,isNum) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER;\n        if(isNum){\n            URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items/summary?item_number='+searchWord;\n        }\n        else {\n            URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/items/summary?item_desc='+searchWord+'&&&&&&&';\n        }\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.items.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n};\n\nlet getItemFullText = (searchText) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/item/fulltext/'+searchText+'%3A*';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.item && FindResponse.item.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\nlet getItemSummaryFullText = (searchText) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/item/item/summary/fulltext/'+`'${searchText}'`+'%3A*';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.item && FindResponse.item.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0)\n                    }\n                },\n                (error) => {\n                    reject(0)\n                }\n            )\n    });\n\n};\n\nexport {\n        getAllItems,getAllItemsSummary,getAllInventoryItemSearch,ItemInventoryCount,ItemCount,getStockValueSalesWise,getCategoriesItems,\n        getCategoriseWiseItems,getAllBasicItems,getReorderCount,isExitsInventoryItem,\n        getItemByNumber,getFindSummaryItem,getSubCategories,getFindInventoryItem,\n        getReorderByNumberAndSupplier,getItemFullText,getItemSummaryFullText, getItemInvByNumber,getAllManufactureItems,\n        itemByCategory,itemBySubcategory,getInvItemDetails,getItemByNumberBid,getItemByProductType,\n    }\n","\nfunction myHeaders (){\n    const headers = {\n        'user_id':sessionStorage.getItem('user_id'),\n        'company_id':sessionStorage.getItem('company_id'),\n        'client_id':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n    };\n\n    return headers;\n}\n\nlet companyDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n    let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/com/companies';\n\n    fetch(URL_REGISTER, {\n        method: \"GET\",\n        headers: myHeaders()\n    })\n        .then(Response => Response.json())\n        .then(\n            (FindResponse) => {\n                if(FindResponse !== undefined){\n                    resolve(FindResponse)\n                }\n            },\n            (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\nlet locationDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/inv/inventory-locations';\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\nlet branchDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/com/branches';\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\n\nlet bankDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/sales/bank_accounts';\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\n\nlet userDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/auth/users';\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\nlet exportDataDetails = (url) =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + url;\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\n\nlet taxDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/sales/vatcodes';\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\n\nlet settingsDetails = () =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/com/prefs';\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\nlet getUserByID = (userId) =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + 'api/auth/user/'+userId;\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\nlet checkOrderExistCompany = () => {\n    return new Promise((resolve,reject) =>{\n        let URL_TOTAL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-orders';\n\n        fetch(URL_TOTAL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponseTotal) => {\n                    if(FindResponseTotal){\n                        resolve (FindResponseTotal)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n\n};\n\n\n\nexport {\n    companyDetails,settingsDetails,locationDetails,\n    taxDetails,getUserByID,checkOrderExistCompany,\n    exportDataDetails,userDetails,bankDetails,branchDetails\n}\n","import React from \"react\";\n\nfunction myHeaders() {\n    const headers = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'user_id': sessionStorage.getItem('user_id'),\n        'company_id': sessionStorage.getItem('company_id'),\n        'client_id': sessionStorage.getItem('client_id'),\n        'authorization': sessionStorage.getItem('authorization'),\n    };\n\n    return headers;\n}\n\nconst postService = (url,data,auth) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + url, {\n            method: 'POST',\n            headers: myHeaders(auth),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve(FindResponse);\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet userLogin = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/auth/user/online/login', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem.user !== undefined && FindResponseItem.user.status !== 401){\n                        resolve(FindResponseItem)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet payHereResponse = (url) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                \"Content-type\": \"application/json\"\n            },\n            //body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (response) => {\n                    if (response !== undefined){\n                        resolve(response)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet addUserStep1 = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/auth/register-online-add-user', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponse) => {\n                    if (FindResponse.register_adduser !== undefined && FindResponse.register_adduser.status !== 401){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet addUserStep2 = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/auth/register-online-user-step2', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponse) => {\n                    if (FindResponse.register_step2 !== undefined && FindResponse.register_step2.status !== 401){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postCompanyDetails = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/com/company', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem.status !== 400 && FindResponseItem.status !== 404 && FindResponseItem.status !== 403 ){\n                        resolve(FindResponseItem)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postBranches = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/com/branch', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem.status !== 400 && FindResponseItem.status !== 404 && FindResponseItem.status !== 403 ){\n                        resolve(FindResponseItem)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\n\nlet postHoldDiscount = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/sales/salesorder/update/discount-total', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem.salesorder !== undefined){\n                        resolve(FindResponseItem)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\nlet postHoldServiceCharge = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/sales/salesorder/update/service-charge', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n\n            .then(res => res.json())\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem.salesorder !== undefined){\n                        resolve(FindResponseItem)\n                    }\n                    else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\n\n\nlet postItem = (data) =>{\n\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/item/item', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error:', error))\n            .then(\n                (FindResponseItem) => {\n\n                    if (FindResponseItem !== undefined && FindResponseItem.status !== 400\n                        && FindResponseItem.status !== 404 && FindResponseItem.status !== 403) {\n                            if(FindResponseItem.item.length > 0){\n                                resolve(FindResponseItem.item)\n                            }else{\n                                reject(null)\n                            }\n\n                    } else {\n                        reject(null)\n                    }\n\n                });\n    });\n};\n\nlet postReceiveInventory = (inventory) =>{\n\n    return new Promise((resolve, reject) =>{\n        fetch (sessionStorage.getItem('base_url') + '/api/purch/item/receive-inventory', {\n            method: \"POST\",\n            headers: myHeaders(),\n            body: JSON.stringify(inventory),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error:', error))\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem !== undefined && FindResponseItem.status !== 400\n                         && FindResponseItem.status !== 404 && FindResponseItem.status !== 403) {\n                        resolve(FindResponseItem.receive_inventory)\n                    }\n                    else {\n                        reject(\"error\");\n                    }\n                });\n    });\n\n};\n\nlet postSupplierDetails = (supplier) => {\n\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/purch/supplier/supplier', {\n             method: 'POST',\n             headers: myHeaders(),\n             body: JSON.stringify(supplier),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponseSupplier) => {\n                    if (FindResponseSupplier !== undefined && FindResponseSupplier.status !== 400\n                        && FindResponseSupplier.status !== 404 && FindResponseSupplier.status !== 403) {\n                            if(FindResponseSupplier.supplier.length > 0){\n                                resolve(FindResponseSupplier.supplier)\n                            }else{\n                                reject(null)\n                            }\n                   } else {\n                       reject(null)\n                   }\n                });\n    });\n};\n\nlet postPreferenceSetting = (settings) => {\n    console.log( myHeaders(),\" myHeaders()\")\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/com/prefs', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(settings),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse.perf[0])\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\nlet postSalesHold = (holdData) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/sales/salesorder', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(holdData),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\nlet postUpdateSalesHoldStatus = (holdData,holdOrderId) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/sales/salesorder/update/convert-to-salesreceipt/'+holdOrderId, {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(holdData),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postUpdateSalesOrder = (holdData) => {\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/sales/salesorder/update/add-items', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(holdData),\n        })\n\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postUpdateSalesOrderHeader = (holdData) => {\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/sales/salesorder/headers', {\n            method: 'PUT',\n            headers: myHeaders(),\n            body: JSON.stringify(holdData),\n        })\n\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postRemoveItemsSalesOrder = (holdData) => {\n    return new Promise((resolve, reject) => {\n        fetch(sessionStorage.getItem('base_url') + '/api/sales/salesorder/update/remove-items', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(holdData),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\nlet postLocation = (location) =>{\n\n    return new Promise((resolve, reject) =>{\n        fetch (sessionStorage.getItem('base_url') + '/api/inv/inventory-location', {\n            method: \"POST\",\n            headers: myHeaders(),\n            body: JSON.stringify(location),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error:', error))\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem !== undefined && FindResponseItem.status !== 400\n                        && FindResponseItem.status !== 404 && FindResponseItem.status !== 403) {\n                        resolve(FindResponseItem.inventory_location[0])\n                    } else {\n                        reject(\"error\")\n                    }\n                });\n    });\n\n};\n\nlet postBank = (bank) =>{\n\n    return new Promise((resolve, reject) =>{\n        fetch (sessionStorage.getItem('base_url') + '/api/sales/bank_account', {\n            method: \"POST\",\n            headers: myHeaders(),\n            body: JSON.stringify(bank),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error:', error))\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem !== undefined && FindResponseItem.status !== 400\n                        && FindResponseItem.status !== 404 && FindResponseItem.status !== 403) {\n                        resolve(FindResponseItem.bank_account[0])\n                    } else {\n                        reject(\"error\")\n                    }\n                });\n    });\n\n};\n\nlet isNotExitsLocation = (location) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/inventory-location/' + location;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n\n                    if(FindResponse.inventory_location.length > 0){\n                        resolve(false)\n                    }\n                    else {\n                        resolve(true)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet isNotExitsBranch = (branch) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/com/branch/' + branch;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n\n                    if(FindResponse.branch.length > 0){\n                        resolve(false)\n                    }\n                    else {\n                        resolve(true)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet isNotExitsBank = (bankId) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/bank_account/' + bankId;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n\n                    if(FindResponse.bank_accounts.length > 0){\n                        resolve(false)\n                    }\n                    else {\n                        resolve(true)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\n\nlet getBranchById = (branch) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/com/branch/' + branch;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n\n                    if(FindResponse.branch.length > 0){\n                        resolve(FindResponse.branch)\n                    }\n                    else {\n                        reject(null)\n                    }\n                },\n                (error) => {\n                    reject(null)\n                }\n            )\n    });\n};\n\nlet postTax = (tax) =>{\n\n    return new Promise((resolve, reject) =>{\n        fetch (sessionStorage.getItem('base_url') + '/api/sales/vatcode', {\n            method: \"POST\",\n            headers: myHeaders(),\n            body: JSON.stringify(tax),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error:', error))\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem !== undefined && FindResponseItem.status !== 400\n                        && FindResponseItem.status !== 404 && FindResponseItem.status !== 403) {\n                        resolve(FindResponseItem.vatcode[0])\n                    } else {\n                        reject(\"error\")\n                    }\n                });\n    });\n\n};\n\nlet postItemForTaxTotal = (taxTotal) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/sales/vat/vat_total', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(taxTotal),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postLoyalty = (loyalty) =>{\n\n    return new Promise((resolve, reject) =>{\n        fetch (sessionStorage.getItem('base_url') + '/api/rewards/reg/card', {\n            method: \"POST\",\n            headers: myHeaders(),\n            body: JSON.stringify(loyalty),\n        }).then(res => res.json())\n\n            .catch(error => console.error('Error:', error))\n            .then(\n                (FindResponseItem) => {\n                    if (FindResponseItem !== undefined && FindResponseItem.status !== 400\n                        && FindResponseItem.status !== 404 && FindResponseItem.status !== 403) {\n                        resolve(FindResponseItem.cards)\n                    } else {\n                        reject(\"error\")\n                    }\n                });\n    });\n\n};\n\nlet postSalesReturn = (data) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/sales/return', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet smsGateway = (data) => {\n\n    let myHeaders = {\n        'Accept': 'application/json'\n    };\n\n    return new Promise((resolve, reject) => {\n        fetch ('http://34.222.119.100/kale-sms-gateway/index.php', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers :myHeaders\n\n        })\n            .then(res => {res.json();})\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse);\n\n                    } else {\n                        reject(null);\n                    }\n                })\n            .catch(error => {\n                console.error('Error', error);\n            })\n    });\n};\n\nlet postAddExpense = (data) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/expense/expense', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postStockAdjustmentDetails = (data) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/inv/inventory-adj', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postWriteOffItemsDetails = (data) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/inv/writeoff', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\nlet postTOG = (data) => {\n    return new Promise((resolve, reject) => {\n        fetch (sessionStorage.getItem('base_url') + '/api/inv/item/tog', {\n            method: 'POST',\n            headers: myHeaders(),\n            body: JSON.stringify(data),\n        })\n            .then(res => res.json())\n            .catch(error => console.error('Error', error))\n            .then(\n                (FindResponse) => {\n                    if (FindResponse !== undefined && FindResponse.status !== 400\n                        && FindResponse.status !== 404 && FindResponse.status !== 403) {\n                        resolve (FindResponse)\n                    } else {\n                        reject(null)\n                    }\n                });\n    });\n};\n\n\n\nexport{postService,userLogin,postCompanyDetails,postItem,postReceiveInventory,\n    postSupplierDetails,postPreferenceSetting,postSalesHold,\n    postUpdateSalesHoldStatus,postLocation,postTax,postBank,\n    postItemForTaxTotal,postSalesReturn,postHoldServiceCharge,\n    postHoldDiscount,isNotExitsLocation,smsGateway,addUserStep1,addUserStep2,\n    postAddExpense,postStockAdjustmentDetails,postWriteOffItemsDetails,\n    postTOG,postUpdateSalesOrder,postRemoveItemsSalesOrder,postUpdateSalesOrderHeader,\n    postBranches,isNotExitsBranch, getBranchById,payHereResponse,\n    isNotExitsBank,postLoyalty\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {green} from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {lightBlue} from \"@material-ui/core/colors\";\nimport {Slide} from \"@material-ui/core\";\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n    success: {\n        color: green[600],\n        backgroundColor: \"#fff\",\n    },\n    error: {\n        color: theme.palette.error.dark,\n        backgroundColor: \"#fff\",\n    },\n    info: {\n        color: lightBlue,\n        backgroundColor: \"#fff\",\n    },\n    warning: {\n        color: \"#FFBB1A\",\n        backgroundColor: \"#fff\",\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    messageBody: {\n        color: \"#000\",\n        display: 'flex',\n        alignItems: 'center',\n    },\n    iconClose: {\n        color: \"#000\",\n        fontSize: 20,\n    },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n    const classes = useStyles1();\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    <span className={classes.messageBody}> {message}</span>\n                 </span>\n            }\n            action={[\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n                    <CloseIcon className={classes.iconClose} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nMySnackbarContentWrapper.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nexport default function CustomizedSnackbars(props) {\n    const [open, setOpen] = React.useState(true);\n    const message = props.message;\n    const severity = props.severity;\n    const position = props.position;\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        props.toastClickHandle();\n        setOpen(false);\n    };\n\n    return (\n        <Slide direction=\"right\" in={true} mountOnEnter unmountOnExit>\n            <Snackbar\n                anchorOrigin={{vertical: 'bottom', horizontal: position}}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n            >\n                <MySnackbarContentWrapper\n                    onClose={handleClose}\n                    variant={severity}\n                    message={message}\n                />\n            </Snackbar>\n        </Slide>\n    );\n}\n","import React from 'react';\nimport {createMuiTheme, makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport green from \"@material-ui/core/colors/green\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n});\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n    },\n    typography: { useNextVariants: true },\n});\n\n\nexport default function LinearDeterminate(props) {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <MuiThemeProvider theme={theme}>\n                <LinearProgress color=\"primary\" variant=\"determinate\" value={props.count} style={{height: 12}}/>\n            </MuiThemeProvider>\n        </div>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/Sample_File.3c636866.xls\";","import React from 'react';\nimport {createMuiTheme, makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport green from \"@material-ui/core/colors/green\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport {ExcelRenderer} from \"react-excel-renderer\";\nimport {postItem} from \"../../services/PostService\";\nimport LinearDeterminate from \"./ProgressBarWithPercentage/ProgressBarWithPercentage\";\nimport SampleFile from \"../../Images/Sample_File.xls\";\nimport {getItemByNumber} from \"../../services/GetItemService\";\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n    },\n    typography: { useNextVariants: true },\n});\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nfunction ImportExcelDialog(props) {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const [fileName, setFileName] = React.useState('Choose your file');\n    const [postDataCount, setPostDataCount] = React.useState(0);\n    const [showProgress, setShowProgress] = React.useState(false);\n    const [viewButton, setViewButton] = React.useState(false);\n\n    const handleClose = () => {\n        props.propsHandleImport('');\n        setOpen(false);\n    };\n\n    const handleView = () => {\n        props.propsHandleImport('done');\n        setOpen(false);\n    };\n\n    const  fileHandler =  (event) => {\n        setShowProgress(true);\n        let fileObj = event.target.files[0];\n        setFileName(fileObj.name);\n        ExcelRenderer(fileObj, (error, resp) => {\n            let totalRow = 0;\n\n            for(let row of resp.rows){\n\n                if(row.length > 0 && row[0] !== \"Item Number\") {\n                    totalRow += 1;\n                }\n            }\n\n            if (!error) {\n\n                readData(resp.rows,totalRow).then(() => {\n\n                    setShowProgress(false);\n                    setViewButton(true);\n                    // setCols(resp.cols);\n                  //  setRows(resp.rows);\n\n                }).catch((e) => {\n                    console.log(\"DATA_POST_ITEM\", \"catch\")\n                });\n\n            } else {\n                console.log(error);\n            }\n        });\n    };\n\n    const readData = async (rowData,totalRows)=>{\n\n        let countPostItem = 0;\n        for (let columns of rowData){\n\n            if(!columns[0]){\n                break;\n            }\n\n            if(columns[0] === \"Item Number\"){\n                continue;\n            }\n\n            let data ={\n                'client_id':sessionStorage.getItem('client_id'),\n                'company_id':sessionStorage.getItem('company_id'),\n                \"item_number\":columns[0].toString(),\n                \"item_desc\": columns[1] ? columns[1].toString() : \"n/l\",\n                \"qoh\":columns[2] ? parseFloat(columns[2]) : 0.0,\n                \"qoh_count\":columns[2] ? parseFloat(columns[2]) : 0.0,\n                \"selling_price\":columns[3] ? parseFloat(columns[3]) : 0.0,\n                \"category\":columns[4] ? columns[4].toString() : \"Others\",\n                \"subcategory\": columns[5] ? columns[5].toString() : \"Others\",\n                \"reorder_qty\":columns[6] ? parseFloat(columns[6]) : 0.0,\n                \"track_inventory\": columns[7]  ? columns[7].toString() : \"N\",\n                \"uom\":columns[8] ? columns[8].toString() : \"No\",\n                \"last_purchase_price\":columns[9] ? parseFloat(columns[9]) : 0.0,\n                \"max_discount\":columns[10] ? parseFloat(columns[10]) : 0.0,\n                \"max_discount_type\":columns[11] ? parseInt(columns[11],0) : 0,\n                \"default_discount\": columns[12] ? parseFloat(columns[12]) : 0,\n                \"default_discount_type\": columns[13] ? parseInt(columns[13],0) : 0,\n                \"bid_exp_date\": columns[14] ? columns[14].toString() : \"n/l\",\n                \"supplier_id\":columns[18] ? columns[18].toString() : \"0\",\n                \"type\":columns[19] ? columns[19].toString() : \"P\",\n                \"location_id\":columns[20] ? columns[20].toString() : \"1\",\n                \"temp_bid\":0,\n                \"bid\":0,\n                \"item_desc1\":\"n/l\".toString(),\n                \"vatcode1\":undefined,\n                \"vatcode2\":undefined,\n                \"vatcode3\":undefined,\n                \"vatcode4\":undefined,\n                \"bid_text\":\"n/l\",\n                \"bid_rcd_qty\":0.0,\n                \"allow_sales\":\"1\"\n            };\n\n            try {\n                let itemResponse = await getItemByNumber(columns[0]);\n                if(itemResponse.item.length === 0) {\n                    await postItem(data);\n                    countPostItem = countPostItem + 1;\n                    setPostDataCount(countPostItem/totalRows*100);\n                }\n                else {\n                    countPostItem = countPostItem + 1;\n                    setPostDataCount(countPostItem/totalRows*100);\n                }\n            }\n            catch(e){\n                console.log(e)\n            }\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <Dialog\n                disableBackdropClick\n                disableEscapeKeyDown\n                maxWidth=\"sm\"\n                open={open}\n                aria-labelledby=\"max-width-dialog-title\"\n            >\n                <React.Fragment>\n                    {showProgress ?\n                        <LinearDeterminate count={postDataCount}/> : null\n                    }\n                </React.Fragment>\n                <DialogTitle id=\"alert-dialog-title\" className=\"dialogHeadingColor\">\n                    {\"You can import your products (Items) information from an Excel Spreadsheet. \"}\n                    <span>\n                        <a href={SampleFile} style={{fontSize: 14}} download>\n                            [Download sample item]\n                        </a>\n                    </span>\n                </DialogTitle>\n                <MuiThemeProvider theme={theme}>\n                    <DialogContent>\n                        <div className={classes.root}>\n                            <input\n                                id=\"contained-button-file\"\n                                className={classes.input}\n                                type=\"file\"\n                                accept=\".xls,.xlsx,.csv\"\n                                onChange={fileHandler}\n                            />\n                            <label htmlFor=\"contained-button-file\">\n                                <span style={{marginLeft : -24, fontSize : 17,padding: \"0px 15px\", color:\"#979797\"}}>{fileName} </span>\n                                <Button variant=\"contained\" style={{backgroundColor:\"#106e4a\", color:\"white\",}} component=\"span\" startIcon={<CloudUploadIcon style={{color:\"white\"}}/>}>\n                                   {postDataCount > 0 ? \"Uploading... \" + Math.ceil(postDataCount) +\"%\" :  \"Upload\"}\n                                </Button>\n                            </label>\n                        </div>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} style={{backgroundColor:\"#ececec\", color:\"black\"}}>\n                            Close\n                        </Button>\n                        {viewButton &&\n                        <Button onClick={handleView} style={{backgroundColor: \"#106e4a\", color: \"white\"}}>\n                            View Items\n                        </Button>\n                        }\n                    </DialogActions>\n                </MuiThemeProvider>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n\nexport default React.memo(ImportExcelDialog);\n","\nconst paymentMethod = (method) => {\n    let value;\n    switch (method){\n        case '1001':\n            value = 'Cash';\n            break;\n        case '1002':\n            value = 'Cheque';\n            break;\n        case '1003':\n            value = 'Debit';\n            break;\n        case '1004':\n            value = 'Credit';\n            break;\n        case '1016':\n            value = 'Online Transfer';\n            break;\n        case '1011':\n            value = 'Master';\n            break;\n        case '1012':\n            value = 'Visa';\n            break;\n        case '1013':\n            value = 'Other card';\n            break;\n        case '1008':\n            value = 'Exchange';\n            break;\n        default:\n            value = method;\n    }\n    return value;\n};\n\nconst orderMethod = (method) => {\n    let value;\n    switch (method){\n        case 'TABLE':\n            value = \"1001\";\n            break;\n        case 'TAKEAWAY':\n            value = \"1002\";\n            break;\n        case 'DELIVERY':\n            value = \"1003\";\n            break;\n        case 'ROOM':\n            value = \"1005\";\n            break;\n        default:\n            value = \"0\";\n    }\n    return value;\n};\n\nconst orderMethodByID = (method)=>{\n    let value;\n    switch (method){\n        case '1001':\n            value = \"Dine In\";\n            break;\n        case '1002':\n            value = \"Takeaway\";\n            break;\n        case '1003':\n            value = \"Delivery\";\n            break;\n        case '1005':\n            value = \"Room\";\n            break;\n        default:\n            value = '';\n    }\n    return value;\n};\n\nconst holdOrderMethodByID = (method)=>{\n    let value;\n    switch (method){\n        case '1001':\n            value = \"TABLE\";\n            break;\n        case '1002':\n            value = \"TAKEAWAY\";\n            break;\n        case '1003':\n            value = \"DELIVERY\";\n            break;\n        case '1005':\n            value = \"ROOM\";\n            break;\n        default:\n            value = 'TABLE';\n    }\n    return value;\n};\n\nconst productionTypeToSever = (productType) => {\n    let type;\n    switch (productType) {\n        case \"RC\":\n            type = \"R\";\n            break;\n        case \"Lotto\":\n            type = \"S\";\n            break;\n        case \"Lotto Winning\":\n            type = \"T\";\n            break;\n        case \"Lottery\":\n            type = \"U\";\n            break;\n        case \"Lottery Winning\":\n            type = \"V\";\n            break;\n        case \"OTC\":\n            type = \"W\";\n            break;\n        case \"Add-Ons\":\n            type = \"X\";\n            break;\n        case \"Combo Items\":\n            type = \"Y\";\n            break;\n        case \"BOM Items\":\n            type = \"B\";\n            break;\n        case \"MI\":\n        case \"Prepared Items\":\n            type = \"Z\";\n            break;\n        case \"Ingredient Items\":\n        case \"Manufacturer\":\n            type = \"M\";\n            break;\n        case \"IMEI\":\n        case \"Serial Number\":\n            type = \"I\";\n            break;\n        case \"Resale Items\":\n            type = \"P\";\n            break;\n        case \"PhoneCard\":\n            type = \"N\";\n            break;\n        case \"Shopify\":\n            type = \"F\";\n            break;\n        default:\n            type = \"P\";\n    }\n\n    return type;\n};\n\n\nconst productionTypeToLocal = (productType,pref) => {\n    let type;\n    switch (productType) {\n        case \"M\":\n            type = pref.industryType === \"103\" ? 'Ingredient Items' : 'Manufacturer';\n            break;\n        case \"I\":\n            type = pref.industryType === \"105\" ?  'IMEI' : \"Serial Number\";\n            break;\n        case \"P\":\n            type = \"Resale Items\";\n            break;\n        case \"R\":\n            type = \"RC\";\n            break;\n        case \"S\":\n            type = \"Lotto\";\n            break;\n        case \"T\":\n            type = \"Lotto Winning\";\n            break;\n        case \"U\":\n            type = \"Lottery\";\n            break;\n        case \"V\":\n            type = \"Lottery Winning\";\n            break;\n        case \"W\":\n            type = \"OTC\";\n            break;\n        case \"X\":\n            type = \"Add-Ons\";\n            break;\n        case \"Y\":\n            type = \"Combo Items\";\n            break;\n        case \"Z\":\n            type = \"MI\";\n            break;\n        case \"B\":\n            type = \"BOM Items\";\n            break;\n        case \"F\":\n            type = \"Shopify\";\n            break;\n        default:\n            type = productType;\n    }\n\n    return type;\n};\n\nconst loadSpinnerData = (pref) => {\n    let product_Type;\n    if(pref.CurrencyType === 'cad'){\n        product_Type = [\n            {\n                label: 'Resale Items'\n            },\n            {\n                label: 'Manufacturer'\n            },\n            {\n                label: 'IMEI'\n            },\n            {\n                label: 'Lotto'\n            },\n            {\n                label: 'Lotto Winning'\n            },\n            {\n                label: 'Lottery'\n            },\n            {\n                label: 'Lottery Winning'\n            }\n        ];\n    }\n    else{\n\n        // 103 resturant\n        if(pref.industryType === \"103\"){\n            product_Type = [\n                {\n                    label: 'Resale Items'\n                },\n                {\n                    label: 'Ingredient Items'\n                },\n                {\n                    label: 'Combo Items'\n                },\n                // {\n                //     label: 'Production / Food Costing'\n                // },\n            ];\n        }\n        else {\n            product_Type = [\n                {\n                    label: 'Resale Items'\n                },\n                {\n                    label: 'Manufacturer'\n                },\n                {\n                    label: pref.industryType === \"105\" ?  'IMEI' : \"Serial Number\"\n                },\n            ];\n        }\n\n    }\n    return product_Type;\n}\n\nconst setColor = (i) => {\n    let color;\n    switch (i) {\n        case 0 :\n        case 16 :\n        case 32 :\n            color = '#ffebee';\n            break;\n        case 1 :\n        case 17:\n        case 33 :\n            color = '#FCE4EC';\n            break;\n        case 2 :\n        case 18:\n        case 34 :\n            color = '#F3E5F5';\n            break;\n        case 3 :\n        case 19:\n        case 35 :\n            color = '#EDE7F6';\n            break;\n        case 4 :\n        case 20:\n        case 36 :\n            color = '#E8EAF6';\n            break;\n        case 5 :\n        case 21:\n        case 37 :\n            color = '#E3F2FD';\n            break;\n        case 6 :\n        case 22:\n        case 38 :\n            color = '#E1F5FE';\n            break;\n        case 7 :\n        case 23:\n        case 39 :\n            color = '#E0F7FA';\n            break;\n        case 8 :\n        case 24:\n        case 40 :\n            color = '#E0F2F1';\n            break;\n        case 9 :\n        case 25:\n        case 41 :\n            color = '#E8F5E9';\n            break;\n        case 10 :\n        case 26:\n        case 42 :\n            color = '#F1F8E9';\n            break;\n        case 11 :\n        case 27:\n        case 43 :\n            color = '#F9FBE7';\n            break;\n        case 12 :\n        case 28:\n        case 44 :\n            color = '#FFFDE7';\n            break;\n        case 13 :\n        case 29:\n        case 45 :\n            color = '#FFF8E1';\n            break;\n        case 14 :\n        case 30:\n        case 46 :\n            color = '#FFF3E0';\n            break;\n        case 15 :\n        case 31:\n        case 47 :\n            color = '#FBE9E7';\n    }\n    return color;\n}\n\nconst getLocalStorageSize = () => {\n    let _lsTotal = 0,\n        _xLen, _x;\n    for (_x in localStorage) {\n        if (!localStorage.hasOwnProperty(_x)) {\n            continue;\n        }\n        _xLen = ((localStorage[_x].length + _x.length) * 2);\n        _lsTotal += _xLen;\n        console.log(_x.substr(0, 50) + \" = \" + (_xLen / 1024).toFixed(2) + \" KB\")\n    }\n    console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\n}\n\nconst orderType = (orderType) => {\n    let value;\n    switch (orderType){\n        case 1003:\n            value = 'Cancelled Sales';\n            break;\n        case 1001:\n            value = 'Sales';\n            break;\n        case 1002:\n            value = 'Sales';\n            break;\n        case 1006:\n            value = 'Quotation';\n            break;\n        // case '1004':\n        //     value = 'Sales Order';\n        //     break;\n        // case '1005':\n        //     value = 'Create';\n        //     break;\n        // case '1006':\n        //     value = 'Start';\n        //     break;\n        // case '1007':\n        //     value = 'Finish';\n        //     break;\n        default:\n            value = orderType;\n    }\n    return value;\n};\n\n\nexport {orderMethodByID,productionTypeToSever,productionTypeToLocal,\n    paymentMethod,orderMethod,holdOrderMethodByID,loadSpinnerData,setColor,orderType,\n    }\n","import React, {useEffect, useImperativeHandle} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst filter = createFilterOptions();\nlet options = [];\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n        margin: theme.spacing.unit * 4,\n        marginTop: 35,\n        width: 210,\n        marginLeft : 50\n    },\n    margin_width:{\n        margin: theme.spacing.unit,\n        marginTop: 25,\n        width: 222,\n    },\n}));\n\nconst CustomAutocomplete = React.forwardRef((props, ref) => {\n    const classes = useStyles();\n    options = props.setting.array;\n    const [value, setValue] = React.useState(props.setting.defaultValue);\n\n    useImperativeHandle(ref, () => ({\n        handleClear() {\n            setValue('');\n        }\n    }));\n\n    useEffect(() => {\n\n    }, [value]);\n\n\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                // Create a new value from the user input\n                if (newValue && newValue.inputValue) {\n                    setValue(newValue.inputValue);\n\n                    return;\n                }\n\n                setValue(newValue);\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                // Suggest the creation of a new value\n                if (params.inputValue !== '') {\n                    if(props.setting.arrayName === 'category'){\n                        filtered.push({\n                            inputValue: params.inputValue,\n                            category: `Add \"${params.inputValue}\"`,\n                        });\n                    }\n                    else {\n                        filtered.push({\n                            inputValue: params.inputValue,\n                            subcategory: `Add \"${params.inputValue}\"`,\n                        });\n                    }\n\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={options}\n            getOptionLabel={(option) => {\n                // Value selected with enter, right from the input\n                if (typeof option === 'string') {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue;\n                }\n                // Regular option\n                return props.setting.arrayName === 'category' ? option.category : option.subcategory;\n            }}\n            renderOption={\n                props.setting.arrayName === 'category' ?\n                    (option) => option.category :\n                    (option) => option.subcategory\n            }\n            freeSolo\n            renderInput={(params) => (\n                <TextField  {...params} label={props.setting.label}\n                            variant=\"outlined\"\n                            className={classes.margin_width}\n                            value={value}\n                            onBlur={() => props.onChange(value)}\n                />\n            )}\n        />\n    );\n})\n\nexport default React.memo(CustomAutocomplete);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {createMuiTheme,MuiThemeProvider} from '@material-ui/core/styles';\nimport green from \"@material-ui/core/colors/green\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n    },\n    typography: { useNextVariants: true },\n});\n\n\nfunction CustomConfirmDialog(props) {\n    const [open, setOpen] = React.useState(true);\n\n    const handleClose = () => {\n        props.handleDialog('');\n        setOpen(false);\n    };\n\n    const handleOk =  () => {\n        props.handleDialog(props.data);\n    };\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                keepMounted\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">\n                    {props.data ?\n                        props.data.label :\n                        props.lable\n                    }\n                </DialogTitle>\n                <MuiThemeProvider theme={theme}>\n                    <DialogActions>\n                        <Button onClick={handleClose} style={{backgroundColor:\"#ececec\", color:\"black\"}}>\n                            No\n                        </Button>\n                        <Button style={{backgroundColor: \"#106E4A\", color: \"#FFF\"}} variant=\"contained\" color=\"secondary\" onClick={handleOk}>\n                            Yes\n                        </Button>\n                    </DialogActions>\n                </MuiThemeProvider>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default React.memo(CustomConfirmDialog)\n","function myHeaders (){\n    const headers = {\n        'user_id':sessionStorage.getItem('user_id'),\n        'company_id':sessionStorage.getItem('company_id'),\n        'client_id':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n    };\n    return headers;\n}\n\nfunction shopifyHeaders (){\n    const headers = {\n        'Accept': 'application/json',\n        \"Content-type\": \"application/json\",\n        'user_id':sessionStorage.getItem('user_id'),\n        'company_id':sessionStorage.getItem('company_id'),\n        'client_id':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n    };\n    return headers;\n}\n\nfunction qBHeaders (setting){\n    const headers = {\n        'Accept': 'application/json',\n        'userId':sessionStorage.getItem('user_id'),\n        'companyId':sessionStorage.getItem('company_id'),\n        'clientId':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n\n        'clientidqbo' : setting.clientidqbo,\n        'clientsecret' : setting.clientsecret,\n        'environment' : setting.environment,\n        'redirecturi' : setting.redirecturi,\n        'realmid' : setting.realmid,\n\n    };\n\n    return headers;\n}\n\nlet getQBSetting = (settings) =>{\n\n    return new Promise((resolve,reject) =>{\n        let proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n        // let URL_QB = proxyUrl+ 'https://kalemessagingservice.tk/api/integ-tally-qbo/init/quickbooks';\n        let url = window.location.protocol+\"//\"+window.location.hostname;\n        let URL_QB = url+'/init/quickbooks';\n        // let URL_QB = proxyUrl+ 'https://kalemessagingservice.tk/api/integ-tally-qbo/init/tally';\n        fetch(URL_QB,{\n            method: \"POST\",\n            headers: qBHeaders(settings)\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nfunction squareHeaders (setting){\n    const headers = {\n        'user_id':sessionStorage.getItem('user_id'),\n        'company_id':sessionStorage.getItem('company_id'),\n        'client_id':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n        'base_url': setting.url,\n        'square_auth_token': setting.square_auth_token,\n\n    };\n\n    return headers;\n}\n\nlet getSquareSetting = (settings) =>{\n\n    return new Promise((resolve,reject) =>{\n        // let proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n        // let URL_QB = proxyUrl+ 'https://kalemessagingservice.tk/api/square/init';\n        let url = window.location.protocol+\"//\"+window.location.hostname;\n\n         //let URL_QB = 'https://kalemessagingservice.tk/square';\n         let URL_QB = url+'/square';\n\n        fetch(URL_QB,{\n            method: \"GET\",\n            headers: squareHeaders(settings)\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nfunction tallyHeaders (setting){\n    const headers = {\n        'Accept': 'application/json',\n        'userId':sessionStorage.getItem('user_id'),\n        'companyId':sessionStorage.getItem('company_id'),\n        'clientId':sessionStorage.getItem('client_id'),\n        'authorization':sessionStorage.getItem('authorization'),\n        'email': setting.email\n    };\n\n    return headers;\n}\n\nlet getTallySetting = (settings) =>{\n\n    return new Promise((resolve,reject) =>{\n      //  let proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      let url = window.location.protocol+\"//\"+window.location.hostname;\n\n        let URL_TALLY = + url + '/init/tally';\n        fetch(URL_TALLY,{\n            method: \"POST\",\n            headers: tallyHeaders(settings)\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet postShopifySetting = (settings) =>{\n\n    return new Promise((resolve,reject) =>{\n        let url = window.location.protocol+\"//\"+window.location.hostname;\n        let URL_SHOPIFY = url +'/init/shopify_insertshopifyuser/';\n        fetch(URL_SHOPIFY,{\n            method: \"POST\",\n            headers: settings,\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\n\nlet postShopifyItem = (data) =>{\n\n    return new Promise((resolve,reject) =>{\n        let url = window.location.protocol+\"//\"+window.location.hostname;\n        let URL_SHOPIFY = url +'/init/POST_insertitem';\n        fetch(URL_SHOPIFY,{\n            method: \"POST\",\n            headers: shopifyHeaders(),\n            //headers: settings,\n            body:JSON.stringify(data)\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet modifyShopifyItem = (data) =>{\n\n    return new Promise((resolve,reject) =>{\n        let url = window.location.protocol+\"//\"+window.location.hostname;\n        let URL_SHOPIFY = url +'/init/POST_updateItem';\n        fetch(URL_SHOPIFY,{\n            method: \"POST\",\n            headers: shopifyHeaders(),\n            //headers: settings,\n            body:JSON.stringify(data)\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet deleteShopifyItem = (data) =>{\n\n    return new Promise((resolve,reject) =>{\n        let url = window.location.protocol+\"//\"+window.location.hostname;\n        let URL_SHOPIFY = url +'/init/POST_deleteitem';\n        fetch(URL_SHOPIFY,{\n            method: \"POST\",\n            headers: shopifyHeaders(),\n            //headers: settings,\n            body:JSON.stringify(data)\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\n\n\n\nlet yearlySalesChatData = (startYear,endYear,location) =>{\n\n    return new Promise((resolve,reject) =>{\n        let URL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-sales/monthly-loc?end_date='+endYear+'&start_date='+startYear+'&location_id='+location;\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet yearlyPurchasesChatData = (startYear,endYear,location) =>{\n\n    return new Promise((resolve,reject) =>{\n        let URL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/purchase/total-purchase/monthly-loc?end_date='+endYear+'&start_date='+startYear+'&location_id='+location;\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\n\nlet salesTotal = (startDate,endDate,location_id,payment_method) =>{\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/sales/payments/ext/order/total/loc/payment_method?location_id='+location_id+'&payment_method='+payment_method+'&payment_type=1001&end_date='+endDate+'&start_date='+startDate;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.payment){\n                            totalSales += total.total_payment_received;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet salesPMAndOMTotal = (startDate,endDate,location_id,payment_method,order_method) =>{\n\n    payment_method = payment_method === \"0\" ? \".*\" : payment_method;\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-sales-loc?end_date='+endDate+'&start_date='+startDate+'&payment_method='+payment_method+'&order_method='+order_method+'&location_id='+location_id;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.orders){\n                            totalSales += total.sales_total;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet salesPMAndOMTotalByUser = (startDate,endDate,location_id,payment_method,user_id) =>{\n\n    payment_method = payment_method === \"0\" ? \".*\" : payment_method;\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-sales-loc?end_date='+endDate+'&start_date='+startDate+'&payment_method='+payment_method+'&&location_id='+location_id;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.orders){\n                            totalSales += total.sales_total;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet salesPaymentTotal = (startDate,endDate,location_id,payment_method) =>{\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/sales/payments/ext/order/total/loc/payment_method?location_id='+location_id+'&payment_method='+payment_method+'&payment_type=1001&end_date='+endDate+'&start_date='+ startDate;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.payment){\n                            totalSales += total.total_payment_received;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet salesPaymentTotalByUser = (startDate,endDate,location_id,payment_method,user_id) =>{\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/sales/payments/ext/order/total/loc/payment_method?location_id='+location_id+'&payment_method='+ payment_method +'&payment_type=1001&end_date='+endDate+'&start_date='+ startDate;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.payment){\n                            totalSales += total.total_payment_received;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet getServiceChargeTotal = (startDate,endDate,location) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-servicecharge-loc?end_date='+endDate+'&start_date='+startDate+'&location_id='+location;\n\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        let servicesTotal = 0;\n                        for(let total of FindResponse.orders){\n                            servicesTotal += total.service_charge\n                        }\n                        resolve(servicesTotal)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\n\nlet salesAndInvoiceTotal = (startDate,endDate,location_id,user) =>{\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-sales-loc?created_by='+user+'&end_date='+endDate+'&start_date='+startDate+'&&&location_id='+location_id;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.orders){\n                            totalSales += total.sales_total;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet salesAndInvoiceTotalByUser = (startDate,endDate,location_id,user_id) =>{\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-sales-loc?created_by='+ user_id +'&end_date='+ endDate +'&start_date='+ startDate +'&&&location_id=' + location_id;\n\n        fetch(URL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalSales = 0;\n                        for (let total of FindResponse.orders){\n                            totalSales += total.sales_total;\n                        }\n                        resolve (totalSales);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\nlet getAllReturnOrders = (todayDate,tomorrowDate,location_id,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/returns?page_offset='+index+'&page_limit='+count+'&&&end_date='+tomorrowDate+'&start_date='+todayDate+'&location_id='+location_id;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllReturnsByReturnID = (returnID) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/return/'+returnID;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.return !== null ){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\n\nlet salesReturnTotal = (startDate,endDate,location_id) =>{\n\n    return new Promise((resolve,reject) => {\n        const URL_SALES_RETURN = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-sales-return-loc?end_date='+endDate+'&start_date='+startDate+'&location_id='+location_id;\n\n        fetch(URL_SALES_RETURN,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n\n                        let totalReturn = 0;\n                        for (let total of FindResponse.returns){\n                            totalReturn += total.return_total;\n                        }\n                        resolve (totalReturn);\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n\n            )\n    })\n};\n\n\nlet getSalesReceiptData = (selectSalesReceipt) =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/sales/salesreceipt/'+selectSalesReceipt;\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\nlet getAllSalesPayment = (todayDate,tomorrowDate,location_id,index,count) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/payments?page_limit='+count+'&location_id='+location_id+'&payment_type=1002%7C1004&&&start_date='+todayDate+'&&page_offset='+index+'&&end_date='+tomorrowDate;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet salesPaymentByPaymentID = (paymentID) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/payment/'+paymentID;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.payment){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet salesPaymentByCustomerID = (customerID) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/payments/ext/cust/id/by/'+customerID;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.payment){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getSalesInvoiceData = (selectInvoiceReceipt) =>{\n\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url') + '/api/sales/invoice/'+selectInvoiceReceipt;\n\n        fetch(URL_REGISTER, {\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse !== undefined){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject()\n                }\n            )\n    });\n};\n\n\n\nlet getAllOrders = (startDate,endDate,location_id,order_type,order_method,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices?page_limit='+count+'&location_id='+location_id+'&start_date='+startDate+'&page_offset='+index+'&&order_method='+order_method+'&&end_date='+endDate+'&order_type='+order_type;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersGetOrderID = (orderId) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/'+orderId;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.salereceipts_invoices !== null){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersGetSerialNum = (serialNum) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details?serial_number='+serialNum;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.salereceipts_invoices !== null){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersGetRefNumber = (refNumber) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices?ref_type='+refNumber;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.salereceipts_invoices.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersByLocationID = (locationID) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details?location_id='+locationID+'&&&&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.salereceipts_invoices.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersDetails = (todayDate,tomorrowDate,location_id,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details?page_limit='+count+'&location_id='+location_id+'&&start_date='+todayDate+'&page_offset='+index+'&&&end_date='+tomorrowDate;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersUserWise = (startDate,endDate,location,userId,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices?page_limit='+count+'&location_id='+location+'&start_date='+startDate+'&page_offset='+index+'&&&created_by=^'+userId+'$&end_date='+endDate;\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\n\nlet getAllOrdersTypeDetails = (startDate,endDate,productType,location_id,index,count,callingFrom) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details/type?page_limit='+count+'&location_id='+location_id+'&nonposting_type='+productType+'&&&start_date='+startDate+'&page_offset='+index+'&&&end_date='+endDate;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.salereceipts_invoices && FindResponse.salereceipts_invoices.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersTypeDetailsByLocationID = (locationID) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details?location_id='+locationID+'&&&&&&';\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.salereceipts_invoices.length > 0){\n                        resolve(FindResponse)\n                    }\n                    else {\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersTypeTotal = (startDate,endDate,productType,location_id) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-lotto-loc?end_date='+endDate+'&start_date='+startDate+'&type='+productType+'&&location_id='+location_id;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.orders && FindResponse.orders.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllOrdersTypeTotalByUser = (startDate,endDate,productType,location_id,user_id) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-lotto-loc?end_date='+ endDate +'&start_date='+ startDate +'&created_by='+ user_id +'&&type='+ productType +'&location_id='+ location_id;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.orders && FindResponse.orders.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllPhoneCardTotal = (startDate,endDate,location_id) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'api/rpt/orders/total-lotto-loc?end_date='+endDate+'&start_date='+startDate+'&nonposting_type=O&type=X&location_id='+location_id;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.orders && FindResponse.orders.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllPhoneCardTotalByUser = (startDate,endDate,location_id,user_id) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'api/rpt/orders/total-lotto-loc?end_date='+endDate+'&start_date='+startDate+'&&created_by='+ user_id +'&nonposting_type=O&type=X&&location_id='+location_id;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.orders && FindResponse.orders.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getAllLottoTotalReturn = (startDate,endDate,productType,location_id) => {\n    return new Promise((resolve,reject) => {\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/rpt/orders/return-total-lotto-loc?end_date='+endDate+'&start_date='+startDate+'&&&type='+productType+'&location_id='+location_id;\n\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse.orders && FindResponse.orders.length > 0 ){\n                        resolve(FindResponse)\n                    }\n                    else{\n                        reject(0.00)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n};\n\nlet getTotalSalesCount = (StartDate,endDate,location_id) => {\n    return new Promise((resolve,reject) =>{\n        let URL_TOTAL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/total-orders?location_id='+location_id+'&&&end_date='+endDate+'&start_date='+StartDate;\n\n        fetch(URL_TOTAL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponseTotal) => {\n                    if(FindResponseTotal){\n                        resolve (FindResponseTotal)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n\n};\n\nlet getTotalHoldSalesOrderCount = () => {\n    return new Promise((resolve,reject) =>{\n        let URL_TOTAL_SALES = sessionStorage.getItem('base_url')+'/api/rpt/orders/count-pending-salesorders';\n        fetch(URL_TOTAL_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponseTotal) => {\n                    if(FindResponseTotal){\n                        resolve (FindResponseTotal)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n\n};\n\n\nlet getHoldSalesOrder = (startDate,endDate,location_id,order_status,index,count,callingFrom) => {\n    return new Promise((resolve,reject) =>{\n        let URL_HOLD_SALES\n        if(startDate){\n            URL_HOLD_SALES = sessionStorage.getItem('base_url')+'/api/sales/salesorder?page_limit='+count+'&location_id='+location_id+'&start_date='+startDate+'&page_offset='+index+'&order_status='+order_status+'&&&end_date='+endDate;\n        }\n        else {\n            URL_HOLD_SALES = sessionStorage.getItem('base_url')+'/api/sales/salesorder?page_limit='+count+'&location_id='+location_id+'&&&&page_offset='+index+'&order_status='+order_status+'&&&&';\n        }\n\n        fetch(URL_HOLD_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve (FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n};\n\nlet getHoldSalesOrderDetails = (holdId) => {\n    return new Promise((resolve,reject) =>{\n        let URL_HOLD_SALES = sessionStorage.getItem('base_url')+'/api/sales/salesorder/'+holdId;\n\n        fetch(URL_HOLD_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve (FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n};\n\nlet getSalesReprint = (orderId) => {\n    return new Promise((resolve,reject) =>{\n        let URL_HOLD_SALES = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/'+orderId;\n\n        fetch(URL_HOLD_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve (FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n};\n\nlet getQuotationprint = (orderId) => {\n    return new Promise((resolve,reject) =>{\n        let URL_HOLD_SALES = sessionStorage.getItem('base_url')+'/api/sales/quotation/'+orderId;\n\n        fetch(URL_HOLD_SALES,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve (FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    })\n};\n\nlet getEcofreeReport = (startDate,endDate,location_id,index,count) => {\n    return new Promise((resolve,reject) => {\n\n        //let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/inv/writeoffs?page_limit='+count+'&&location_id='+location_id+'&&&start_date='+startDate+'&page_offset='+index+'&&&end_date='+endDate;\n        //let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details/type?page_limit='+count+'&&&&type=X&start_date='+startDate+'&page_offset='+index+'&&&end_date='+endDate;\n        let URL_REGISTER = sessionStorage.getItem('base_url')+'/api/sales/salesreceipts-invoices/all/details/type?page_limit='+count+'&location_id='+location_id+'&&&type=X&start_date='+startDate+'&page_offset='+index+'&&&end_date='+endDate;\n        fetch(URL_REGISTER,{\n            method: \"GET\",\n            headers: myHeaders()\n        })\n            .then(Response => Response.json())\n            .then(\n                (FindResponse) => {\n                    if(FindResponse){\n                        resolve(FindResponse)\n                    }\n                },\n                (error) => {\n                    reject(0.00)\n                }\n            )\n    });\n\n};\n\n\nexport {getSalesReceiptData,getSalesInvoiceData,salesTotal,\n    salesReturnTotal,yearlySalesChatData,getAllOrders,\n    getAllOrdersDetails,getTotalSalesCount,getAllOrdersGetOrderID,getAllOrdersGetSerialNum,\n    getHoldSalesOrder,getHoldSalesOrderDetails,getTotalHoldSalesOrderCount,\n    getAllReturnOrders,getAllReturnsByReturnID,getAllOrdersTypeDetails,\n    getAllOrdersTypeDetailsByLocationID,getAllOrdersTypeTotal,getAllSalesPayment,\n    salesPaymentByPaymentID,getAllOrdersByLocationID,salesPMAndOMTotal,\n    getQBSetting,getSquareSetting,getTallySetting,salesAndInvoiceTotal,getServiceChargeTotal,\n    getSalesReprint,yearlyPurchasesChatData,getAllLottoTotalReturn,getEcofreeReport,\n    getAllOrdersUserWise,getAllPhoneCardTotal,salesPaymentTotal,salesAndInvoiceTotalByUser,\n    getAllOrdersTypeTotalByUser,getAllPhoneCardTotalByUser,salesPMAndOMTotalByUser,\n    salesPaymentTotalByUser,getQuotationprint,salesPaymentByCustomerID,\n    getAllOrdersGetRefNumber,postShopifySetting,postShopifyItem,modifyShopifyItem,deleteShopifyItem\n}\n","import React, {Component} from 'react'\nimport Button from '@material-ui/core/Button';\nimport { withStyles, MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions/DialogActions\";\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Card from '@material-ui/core/Card';\nimport {dateFormat, isNumber, parseDoubleTwoDecimal} from \"../../Utils/Validation\";\nimport {getCategoriesItems, getItemByNumber,getSubCategories} from \"../../services/GetItemService\";\nimport {locationDetails, taxDetails} from \"../../services/GetCommonService\";\nimport {postItem} from \"../../services/PostService\";\nimport SnackBar from \"../../Helper/SnackbarAlert\";\nimport clsx from \"clsx\";\nimport UploadIcon from '@material-ui/icons/CloudUpload';\nimport ImportExcelDialog from \"../../Helper/ImportExcelDialog\";\nimport {loadSpinnerData, productionTypeToSever} from \"../../Utils/Converstion\";\nimport CustomAutocomplete from \"../../Helper/CustomAutocomplete\";\nimport CustomConfirmDialog from \"../../Helper/CustomConfirmDialog\";\nimport { postShopifyItem } from '../../services/GetSalesService';\n\nconst UOM = [\n    {\n        id: '1',\n        label: 'pcs',\n    },\n    {\n        id: '2',\n        label: 'g',\n    },\n    {\n        id: '3',\n        label: 'kg',\n    },\n    {\n        id: '4',\n        label: 'ml',\n    },\n    {\n        id: '5',\n        label: 'l',\n    },\n    {\n        id: '6',\n        label: 'm',\n    },\n    {\n        id: '7',\n        label: 'mm',\n    },\n    {\n        id: '8',\n        label: 'yard',\n    },\n];\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing.unit,\n        marginTop: 25,\n    },\n    margin_radio:{\n        margin: theme.spacing.unit,\n        '@media (min-width: 854px)': {\n            marginTop: 30,\n        },\n    },\n    margin_width:{\n        margin: theme.spacing.unit,\n        marginTop: 25,\n        width: 222,\n    },\n    margin_width_detail:{\n        margin: theme.spacing.unit,\n        marginTop: 25,\n        width: 700,\n    },\n    menu: {\n        width: 200,\n    },\n    button: {\n        margin: theme.spacing.unit,\n        width: 140,\n        height: 44,\n        backgroundColor: \"#106E4A\",\n        color: 'white',\n        \"&:hover\": {\n            color: 'white',\n            backgroundColor: \"#106E4A\",\n        },\n        \"&:disabled\":{\n            opacity: 24,\n            backgroundColor: \"#8c8c8c70\",\n            color: \"#0b0b0b\",\n        }\n    },\n    buttonMore: {\n        margin: theme.spacing.unit,\n        marginTop: 8,\n        marginLeft : 10,\n        width: 140,\n        height: 44,\n    },\n    button_cancel: {\n        margin: theme.spacing.unit,\n        width: 140,\n        height: 44,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        '@media (min-width: 1081px)': {\n            marginLeft: +drawerWidth,\n        }\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n    track_with_inventory: {\n        '@media (min-width: 854px)': {\n            marginLeft:\"241px\",\n        },\n    },\n    track_with_inventory_less: {\n        '@media (min-width: 854px)': {\n            marginLeft:\"-3px\",\n        },\n    }\n\n});\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#106E4A'\n        },\n    },\n    typography: { useNextVariants: true },\n});\n\n\nclass AddItem  extends Component{\n    prefSettings = JSON.parse(sessionStorage.getItem(\"prefSettings\"));\n    currentLocation = localStorage.getItem(\"currentLocation\");\n    vatCode1;\n    vatCode2;\n    vatCode3;\n    vatCode4;\n    p_vatCode1;\n    p_vatCode2;\n    p_vatCode3;\n    p_vatCode4;\n    alertSnackBar = [];\n\n    constructor() {\n        super();\n        this.customAutoCompleteRef = React.createRef();\n        this.customAutoCompleteRefCat = React.createRef();\n        this.state = {\n            itemNumber: '',\n            itemName: '',\n            itemDetail: '',\n            quantity: '',\n            sellingPrice: '',\n            wholesalePrice: '',\n            category: '',\n            subcategory: '',\n            purchasePrice: '',\n            expiryDate: '',\n            defaultDiscount:'',\n            maxDiscount:'',\n            reorderQuantity:'',\n            itemCode:'',\n            showWarning: true,\n            clearDialog: false,\n            vat:false,\n            selectedValueDefault: '1',\n            selectedValueMax: '1',\n            checkedTrackInv: this.prefSettings.industryType !== \"103\",\n            autoNumber: this.prefSettings.autoNumber,\n            LocationArray:[],\n            taxDataSales:[],\n            taxDataPurchase: [],\n            taxArray: [],\n            location: this.currentLocation,\n            valueTax: null,\n            itemName2nd:'',\n            categoryAll:[],\n            subCategoryAll:[],\n            addDisabled: false,\n            openSnackBar : false,\n            welcomeDialog : false,\n            educationDialog : false,\n            toggleDrawer : true,\n            openExcel: false,\n            confirmDialog: {},\n            // selectedFile: null\n        };\n\n    }\n\n    componentDidMount = async () => {\n        await this.fetchData();\n    }\n\n    fetchData = async () => {\n        await this.fetchCategories();\n        let getLocationDetails = await locationDetails();\n        this.setLocation(getLocationDetails);\n        await this.fetchTaxData();\n    };\n\n    fetchTaxData = async () => {\n        let getTaxDetails = await taxDetails();\n        this.getTax(getTaxDetails);\n    };\n\n\n    fetchCategories = async () => {\n        let getCategoriesItemsDetails = await getCategoriesItems('.*','.*');\n        this.setCategoriesData(getCategoriesItemsDetails);\n    };\n\n    fetchSubCategories = async (category) => {\n        let getSubCategoriesDetails = await getSubCategories('.*','.*',category);\n        this.setSubCategoriesData(getSubCategoriesDetails);\n    };\n\n    setCategoriesData = (FindResponse) => {\n        this.setState({\n            categoryAll: FindResponse.categories\n        });\n    };\n\n    setSubCategoriesData = (FindResponse) => {\n        this.setState({\n            subCategoryAll: FindResponse.items\n        })\n    };\n\n    setLocation = (FindResponse) => {\n        if (FindResponse.inventory_locations.length>0) {\n            this.setState({locationArray : FindResponse.inventory_locations})\n        }\n    };\n\n    getTax = (FindResponse) => {\n        this.setState({\n            taxArray: FindResponse.vatcode.reverse(),\n        })\n    };\n\n    /*send item to server*/\n    posAddItem = async () => {\n        this.setState({addDisabled : true});\n        let data ={\n            'client_id':sessionStorage.getItem('client_id'),\n            'company_id':sessionStorage.getItem('company_id'),\n            \"item_number\":this.state.itemNumber.trim() || \"0\",\n            \"supplier_item_number\": this.state.itemCode,\n            \"temp_bid\":0,\n            \"bid\":0,\n            \"track_inventory\":this.state.checkedTrackInv ? \"Y\" : \"N\",\n            \"item_desc\":this.state.itemName.trim() || \"n/l\",\n            \"item_desc1\": this.state.itemName2nd.trim() || \"n/l\",\n            \"item_desc3\": this.state.itemDetail.trim(),\n            \"category\":this.state.category ? this.state.category.trim() : \"Others\",\n            \"subcategory\": this.state.subcategory ? this.state.subcategory.trim() : \"Others\",\n            \"uom\":this.state.uom || \"pcs\",\n            \"vatcode1\":this.vatCode1,\n            \"vatcode2\":this.vatCode2,\n            \"vatcode3\":this.vatCode3,\n            \"vatcode4\":this.vatCode4,\n            \"p_vatcode1\":this.p_vatCode1,\n            \"p_vatcode2\":this.p_vatCode2,\n            \"p_vatcode3\":this.p_vatCode3,\n            \"p_vatcode4\":this.p_vatCode4,\n            \"selling_price\":parseDoubleTwoDecimal((this.state.sellingPrice).trim()) || 0.0,\n            \"wholesale_price\":parseDoubleTwoDecimal((this.state.wholesalePrice).trim()) || 0.0,\n            \"max_discount\":parseFloat((this.state.maxDiscount).trim()) || 0.0,\n            \"max_discount_type\":parseInt(this.state.selectedValueMax,0),\n            \"default_discount\":parseFloat((this.state.defaultDiscount).trim()) || 0.0,\n            \"default_discount_type\":parseInt(this.state.selectedValueDefault,0),\n            \"type\": productionTypeToSever(this.state.productType),\n            \"last_purchase_price\":parseDoubleTwoDecimal((this.state.purchasePrice).trim()) || 0.0,\n            \"bid_exp_date\": this.state.expiryDate ? dateFormat(this.state.expiryDate,2) : \"n/l\",\n            \"qoh\":parseFloat((this.state.quantity).trim()) || 0.0,\n            \"qoh_count\":parseFloat((this.state.quantity).trim()) || 0.0,\n            \"reorder_qty\":parseFloat(this.state.reorderQuantity.trim()) || 0.0,\n            \"location_id\":this.state.location,\n            \"bid_text\":\"n/l\",\n            \"bid_rcd_qty\":0.0,\n            \"supplier_id\":\"n/l\",\n            \"allow_sales\":\"1\",\n        };\n\n        try {\n            const response = await postItem(data);\n            try{\n            await postShopifyItem(response)\n            }catch(e){\n                console.log(e)\n            }\n            this.showAlertMessage(\"center\",\"The item has been created successfully!\",\"success\");\n            await this.fetchCategories();\n            await this.clear_values();\n\n        }\n        catch (e) {\n            this.showAlertMessage(\"center\",\"Item Not create.\",\"error\");\n        }\n    };\n\n\n    getVatCodeRates = () => {\n        if(this.state.taxDataSales.length > 0){\n            if(this.prefSettings.CurrencyType !== 'cad'){\n                this.vatCode1 = this.state.taxDataSales;\n            }\n            else {\n                this.generateTaxCode(this.state.taxDataSales.toUpperCase(),'sales');\n            }\n\n        }\n\n        if(this.state.taxDataPurchase.length > 0){\n            if(this.prefSettings.CurrencyType !== 'cad'){\n                this.p_vatCode1 = this.state.taxDataPurchase;\n            }\n            else {\n                this.generateTaxCode(this.state.taxDataPurchase.toUpperCase(),'purchase');\n            }\n        }\n    };\n\n\n    generateTaxCode = (taxGroup,taxType) => {\n        if(taxType === 'sales'){\n            if(taxGroup.toUpperCase() === \"T1\" || taxGroup.toUpperCase() === \"T3\"){\n                for(let i = 0; i < this.state.taxArray.length;i++ ) {\n                    let vatcodeDesc = this.state.taxArray[i].vatcode_desc;\n                    if(vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"GST\" || vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"HST\"){\n                        let vatCode = this.state.taxArray[i].vatcode;\n                        this.vatCode1 = vatCode;\n                        break;\n                    }\n                }\n            }else if(taxGroup.toUpperCase() === \"T2\"){\n                for(let i = 0; i < this.state.taxArray.length;i++ ) {\n                    let vatcodeDesc = this.state.taxArray[i].vatcode_desc;\n                    if(vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"GST\"){\n                        let vatCode = this.state.taxArray[i].vatcode;\n                        this.vatCode1 = vatCode;\n                    }\n                    if(vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"PST\"){\n                        let vatCode = this.state.taxArray[i].vatcode;\n                        this.vatCode2= vatCode;\n                    }\n                }\n            }\n        }else {\n            if(taxGroup.toUpperCase() === \"T1\" || taxGroup.toUpperCase() === \"T3\"){\n                for(let i = 0; i < this.state.taxArray.length;i++ ) {\n                    let vatcodeDesc = this.state.taxArray[i].vatcode_desc;\n                    if(vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"GST\" || vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"HST\"){\n                        let vatCode = this.state.taxArray[i].vatcode;\n                        this.p_vatCode1 = vatCode;\n                        break;\n                    }\n                }\n            }else if(taxGroup.toUpperCase() === \"T2\"){\n                for(let i = 0; i < this.state.taxArray.length;i++ ) {\n                    let vatcodeDesc = this.state.taxArray[i].vatcode_desc;\n                    if(vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"GST\"){\n                        let vatCode = this.state.taxArray[i].vatcode;\n                        this.p_vatCode1 = vatCode;\n                    }\n                    if(vatcodeDesc !== undefined && vatcodeDesc.toUpperCase() ===\"PST\"){\n                        let vatCode = this.state.taxArray[i].vatcode;\n                        this.p_vatCode2= vatCode;\n                    }\n                }\n            }\n\n        }\n\n    };\n\n\n    radioChangeMax = (e) =>{\n        this.setState({\n            selectedValueMax: e.currentTarget.value\n        });\n    };\n\n    radioChangeDefault = (e) =>{\n        this.setState({\n            selectedValueDefault: e.currentTarget.value\n        });\n    };\n\n    toggleMenu = () => {\n        this.setState(prevState => ({\n            showWarning: !prevState.showWarning\n        }));\n    };\n\n    handleClickOpenClearDialog = () => {\n        if(this.state.itemName.length > 0){\n            this.setState({ clearDialog: true });\n        }\n    };\n\n    handleCloseClearDialog = () => {\n        this.setState({ clearDialog: false });\n    };\n\n    handleClickOpenVat = () => {\n        this.setState({ vat: true });\n        this.getAllTax();\n    };\n\n    handleCloseVat = () => {\n        this.setState({ vat: false });\n    };\n\n    handleOk = async () => {\n        this.setState({ clearDialog: false });\n        await this.clear_values();\n    };\n\n    handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        this.setState({ open: false });\n    };\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    categoryChange = (category) =>{\n       if(category){\n           if (category.category){\n               this.setState({category: category.category});\n           }\n           else {\n               this.setState({category: category});\n           }\n\n           this.fetchSubCategories(category.category ? category.category : category);\n       }\n    };\n\n    subCategoryChange = (subcategory) =>{\n        if(subcategory){\n            if (subcategory.subcategory){\n                this.setState({subcategory: subcategory.subcategory })\n            }\n            else {\n                this.setState({subcategory: subcategory })\n            }\n        }\n    };\n\n    handleChangeCheckBox = name => event => {\n        if(name === \"autoNumber\"){\n            this.setState({\n                [name]: event.target.checked,\n                itemNumber: '',\n            });\n        }\n        else {\n            this.setState({\n                [name]: event.target.checked,\n            });\n        }\n\n    };\n\n    searchByNum = async () => {\n        if(this.state.itemName.trim().length > 0 ){\n\n            if(this.state.autoNumber){\n                await this.handleAddItem()\n            }\n            else{\n                this.setState({addDisabled : true});\n                let getSearchItem = await getItemByNumber(this.state.itemNumber.trim());\n                if (getSearchItem.item.length > 0 ){\n                    this.setState({addDisabled : false});\n                    this.showAlertMessage(\"center\",\"item already exits\",\"info\");\n                }\n                else {\n                    await this.handleAddItem()\n                }\n            }\n        }\n        else {\n            this.showAlertMessage(\"center\",\"Please enter details\",\"error\");\n        }\n    };\n\n    handleAddItem = async () =>{\n        if(this.checkPurchasePrice()){\n            if(this.checkReorderQty()){\n                if(this.prefSettings.allowTax){\n                    this.getVatCodeRates();\n                }\n                if(this.checkDiscount()){\n                    if(this.checkExpiryDate()){\n                        await this.posAddItem();\n                    }\n                    else {\n                        this.showAlertMessage(\"center\",\"Check expiry date\",\"info\");\n                    }\n                }\n                else {\n                    this.showAlertMessage(\"center\",\"Default discount greater than max discount\",\"info\");\n                }\n            }\n            else {\n                this.setState({confirmDialog: {\n                        label : \"Do you want to Allow? Re order Qty is greater than Add Qty\",\n                        caller: \"reOrderQty\"\n                    }});\n            }\n        }\n        else {\n            if(this.checkReorderQty()){\n                // Purchase price check\n                this.setState({confirmDialog: {\n                        label : \"Do you want to Allow? Purchase price is greater than Selling price\",\n                        caller: \"purchasePrice\"\n                    }});\n            }\n            else {\n                // Re order Qty check\n                this.setState({confirmDialog: {\n                        label : \"Do you want to Allow? Re order Qty is greater than Add Qty\",\n                        caller: \"reOrderQty\"\n                    }});\n            }\n        }\n    };\n\n    checkPurchasePrice = () => {\n        let sellingPrice =  (this.state.sellingPrice).trim() || \"0\";\n        let purchasePrice = (this.state.purchasePrice).trim() || \"0\";\n\n        if(parseFloat(sellingPrice) > 0) {\n            return parseFloat(sellingPrice) >= parseFloat(purchasePrice);\n        }\n        else {\n            return true;\n        }\n    };\n\n    checkDiscount = () => {\n        let maxDiscount = this.state.maxDiscount || \"0\";\n        let maxDiscountType = this.state.selectedValueMax;\n        let sellingPrice = this.state.sellingPrice;\n\n        if(maxDiscountType === '0'){\n            maxDiscount = sellingPrice * (maxDiscount/100);\n        }\n\n        let defaultDiscount = this.state.defaultDiscount || \"0\";\n        let defaultDiscountType = this.state.selectedValueDefault;\n\n        if(defaultDiscountType === '0'){\n            defaultDiscount = sellingPrice * (defaultDiscount/100);\n        }\n\n        if(parseFloat(maxDiscount) > 0 && parseFloat(defaultDiscount) > 0){\n            return parseFloat(maxDiscount) >= defaultDiscount\n        }\n        else{\n            return true;\n        }\n    };\n\n    checkExpiryDate= () => {\n        return dateFormat(new Date(),2) <= dateFormat(this.state.expiryDate,2);\n    };\n\n    checkReorderQty = () => {\n        let qty = (this.state.quantity).trim() || \"0\";\n        let reorderQty = (this.state.reorderQuantity).trim() || \"0\";\n\n        if(parseFloat(qty) > 0){\n            return parseFloat(qty) > parseFloat(reorderQty);\n        }\n        else {\n            return true;\n        }\n    };\n\n    clear_values = async () => {\n\n        this.setState({\n            itemNumber: '',\n            itemName: '',\n            itemDetail : '',\n            quantity: '',\n            sellingPrice: '',\n            wholesalePrice: '',\n            category: '',\n            categoryAll:[],\n            subcategory: '',\n            subCategoryAll:[],\n            purchasePrice: '',\n            expiryDate: '',\n            defaultDiscount: '',\n            maxDiscount: '',\n            reorderQuantity: '',\n            itemCode: '',\n            taxArray: [],\n            taxDataSales:[],\n            taxDataPurchase: [],\n            uom: '',\n            productType: '',\n            location: this.currentLocation,\n            itemName2nd:'',\n            addDisabled: false,\n        });\n\n        this.vatCode1 = undefined;\n        this.vatCode2 = undefined;\n        this.vatCode3 = undefined;\n        this.vatCode4 = undefined;\n        this.p_vatCode1 = undefined;\n        this.p_vatCode2 = undefined;\n        this.p_vatCode3 = undefined;\n        this.p_vatCode4 = undefined;\n\n        this.customAutoCompleteRef.current.handleClear();\n        this.customAutoCompleteRefCat.current.handleClear();\n\n        if(this.prefSettings.allowTax){\n            await this.fetchTaxData();\n        }\n        await this.fetchCategories()\n    };\n\n    // SnackBar Toast function\n    propsCloseToast = () => {\n        this.alertSnackBar = [];\n        this.setState({openSnackBar :false})\n    };\n\n\n    showAlertMessage = (position,message,type) => {\n        this.alertSnackBar[0] = position;\n        this.alertSnackBar[1] = message;\n        this.alertSnackBar[2] = type;\n        this.setState({openSnackBar :true})\n    };\n\n    propsHeaderDrawerClick = () => {\n        this.setState({toggleDrawer : !this.state.toggleDrawer})\n    };\n\n    propsHelpHandleClick = () => {\n        this.setState({welcomeDialog: true})\n    };\n\n    welcomeDialogClose = () => {\n        this.setState({welcomeDialog: false})\n    };\n\n    propsEducationHandleClick = () => {\n        this.setState({educationDialog: true})\n    };\n\n    educationDialogClose = () => {\n        this.setState({educationDialog: false})\n    };\n\n    openExcelPopup = () => {\n        this.setState({openExcel: true})\n    };\n\n   closeExcelPopup = (status) => {\n        this.setState({openExcel: false});\n        if(status === 'done'){\n            this.props.history.push('/Inventorydashboard');\n        }\n    };\n\n    closeConfirmDialog = async (data) => {\n        switch (data) {\n            case \"reOrderQty\":\n                this.getVatCodeRates();\n                if(this.checkDiscount()){\n                    if(this.checkExpiryDate()){\n                       await this.posAddItem();\n                    }\n                    else{\n                        this.showAlertMessage(\"center\",\"Check expiry date\",\"info\");\n                    }\n\n                }else {\n                    this.showAlertMessage(\"center\",\"Default discount greater than max discount\",\"info\");\n                }\n            break;\n            case \"purchasePrice\":\n                this.getVatCodeRates();\n                if(this.checkDiscount()){\n                    if(this.checkExpiryDate()){\n                       await this.posAddItem();\n                    }\n                    else{\n                        this.showAlertMessage(\"center\",\"Check expiry date\",\"info\");\n                    }\n                }else {\n                    this.showAlertMessage(\"center\",\"Default discount greater than max discount\",\"info\");\n                }\n                break;\n        }\n        this.setState({confirmDialog: {}});\n    }\n\n    render(){\n        const {classes} = this.props;\n        return (\n            <div>\n                <Card>\n                <main className={clsx(classes.content, {[classes.contentShift]: !this.state.toggleDrawer,})}>\n                    <div className={this.state.toggleDrawer ? \"container_main2\" : \"container_main\"}>\n                        <React.Fragment>\n                            {this.state.openSnackBar ?\n                                <SnackBar position={this.alertSnackBar[0]} message={this.alertSnackBar[1]} severity={this.alertSnackBar[2]} toastClickHandle={this.propsCloseToast}/>: null\n                            }\n                            {this.state.openExcel ?\n                                <ImportExcelDialog propsHandleImport={this.closeExcelPopup} /> : null\n                            }\n                            {this.state.confirmDialog.label ?\n                                <CustomConfirmDialog handleDialog={this.closeConfirmDialog} data={this.state.confirmDialog}/> : null\n                            }\n\n                        </React.Fragment>\n                        <p style={{color: '#106e4a', fontSize: 21}}> Add Item </p>\n                        { this.prefSettings.subscription !== \"KOP\" ?\n                            <Button variant=\"contained\"\n                                    style={{backgroundColor:\"#E0E0E0\", color:\"black\", float:\"right\", marginRight: 20, marginTop : -55}}\n                                    component=\"span\"\n                                    onClick={this.openExcelPopup}\n                                    startIcon={<UploadIcon\n                                        style={{color:\"black\"}}\n                                    />}>\n                                <span style={{marginTop : 5}}>Import Items</span>\n                            </Button> : null\n                        }\n                        <MuiThemeProvider theme={theme}>\n                            <div style={{height:\"82.5%\",overflowX:\"auto\"}}>\n                                <div style={{width:\"90%\",margin:\"0 auto\"}}>\n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <div style={{float:\"left\",visibility: !this.prefSettings.autoNumber ? \"hidden\" : \"visibles\"}} >\n                                            <FormControlLabel\n                                                disabled={!this.prefSettings.autoNumber}\n                                                label=\"Auto generate item number\"\n                                                control={\n                                                    <Checkbox\n                                                        style={{color: \"#048647\"}}\n                                                        checked={this.state.autoNumber}\n                                                        onChange={this.handleChangeCheckBox('autoNumber')}\n                                                        value=\"autoNumber\"\n                                                        classes={{\n                                                            palette: classes.root,\n                                                            checked: classes.checked,\n                                                        }}\n                                                    />\n                                                }\n                                            />\n                                        </div> :\n                                        <div style={{float:\"left\",display: !this.prefSettings.autoNumber ? \"none\" : \"block\"}} >\n                                        <FormControlLabel\n                                            disabled={!this.prefSettings.autoNumber}\n                                            label=\"Auto generate item number\"\n                                            control={\n                                                <Checkbox\n                                                    style={{color: \"#048647\"}}\n                                                    checked={this.state.autoNumber}\n                                                    onChange={this.handleChangeCheckBox('autoNumber')}\n                                                    value=\"autoNumber\"\n                                                    classes={{\n                                                        palette: classes.root,\n                                                        checked: classes.checked,\n                                                    }}\n                                                />\n                                            }\n                                        />\n                                    </div>\n                                    }\n                                    <div >\n                                        {this.prefSettings.subscription !== \"KOP\" ?\n                                        <FormControlLabel\n                                            label=\"Track With Inventory\"\n                                            className={!this.state.autoNumber ? classes.track_with_inventory : classes.track_with_inventory_less}\n                                            control={\n                                                <Checkbox\n                                                    style={{color: \"#048647\"}}\n                                                    checked={this.state.checkedTrackInv}\n                                                    onChange={this.handleChangeCheckBox('checkedTrackInv')}\n                                                    value=\"checkedTrackInv\"\n                                                    classes={{\n                                                        palette: classes.root,\n                                                        checked: classes.checked,\n                                                    }}\n                                                />\n                                            }\n                                        /> : null\n                                        }\n                                    </div>\n                                </div>\n\n                                <div className=\"addDetailWrapper\">\n                                    { !this.state.autoNumber ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            required\n                                            className={classes.margin_width}\n                                            style={{marginLeft:\"0px !important\"}}\n                                            label=\"Item No\"\n                                            autoComplete=\"off\"\n                                            variant=\"outlined\"\n                                            inputType=\"text\"\n                                            onChange={this.handleChange('itemNumber')}\n                                            value={this.state.autoNumber ? \"Auto generate\" : this.state.itemNumber}\n                                        /> : null\n                                    }\n\n                                    <TextField\n                                        id=\"mui-theme-provider-outlined-input\"\n                                        required\n                                        autoFocus\n                                        className={classes.margin_width}\n                                        label=\"Item Name\"\n                                        variant=\"outlined\"\n                                        autoComplete=\"off\"\n                                        inputType=\"text\"\n                                        onChange={this.handleChange('itemName')}\n                                        value={this.state.itemName}\n                                    />\n                                    {this.prefSettings.allowDualLanguagePrint ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Item Name(2nd lang)\"\n                                            variant=\"outlined\"\n                                            floatingLabelText=\"Item Name(2nd lang)\"\n                                            type=\"text\"\n                                            autoComplete=\"off\"\n                                            onChange={this.handleChange('itemName2nd')}\n                                            value={this.state.itemName2nd}\n                                        /> : null\n                                    }\n                                    {this.prefSettings.subscription !== \"KOP\" && this.state.checkedTrackInv  ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Quantity\"\n                                            disabled={!this.state.checkedTrackInv}\n                                            variant=\"outlined\"\n                                            autoComplete=\"off\"\n                                            type=\"number\"\n                                            onChange={this.handleChange('quantity')}\n                                            value={this.state.quantity}\n                                        /> : null\n                                    }\n                                    <TextField\n                                        id=\"mui-theme-provider-outlined-input\"\n                                        className={classes.margin_width}\n                                        autoComplete=\"off\"\n                                        label=\"Selling Price\"\n                                        variant=\"outlined\"\n                                        type=\"number\"\n                                        onKeyPress={isNumber}\n                                        onChange={this.handleChange('sellingPrice')}\n                                        value={this.state.sellingPrice}\n                                    />\n                                    <div style={{display: 'flex'}}>\n                                    {this.prefSettings.wholesalePrice ?\n                                    < TextField\n                                        id=\"mui-theme-provider-outlined-input\"\n                                        className={classes.margin_width}\n                                        autoComplete=\"off\"\n                                        label=\"Whole sale Price\"\n                                        variant=\"outlined\"\n                                        type=\"number\"\n                                        onKeyPress={isNumber}\n                                        onChange={this.handleChange('wholesalePrice')}\n                                        value={this.state.wholesalePrice}\n                                        /> : null\n                                    }\n                                    <CustomAutocomplete setting={{\n                                        array : this.state.categoryAll,\n                                        label: \"Category\",\n                                        arrayName: 'category',\n                                        defaultValue: ''\n                                    }} onChange={this.categoryChange}\n                                                        ref={this.customAutoCompleteRefCat}\n                                    />\n\n                                    <CustomAutocomplete setting={\n                                        {\n                                            array : this.state.subCategoryAll,\n                                            label: \"Sub Category\",\n                                            arrayName: 'subcategory',\n                                            defaultValue: ''\n                                        }\n                                    } onChange={this.subCategoryChange}\n                                                        ref={this.customAutoCompleteRef}\n                                    />\n                                    \n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Purchase Price\"\n                                            variant=\"outlined\"\n                                            autoComplete=\"off\"\n                                            type=\"number\"\n                                            onKeyPress={isNumber}\n                                            onChange={this.handleChange('purchasePrice')}\n                                            value={this.state.purchasePrice}\n                                        /> : null\n                                    }\n                                    </div>\n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <TextField\n                                            id=\"outlined-select-currency-native\"\n                                            select\n                                            label=\"Product Type\"\n                                            className={classes.margin_width}\n                                            value={this.state.productType}\n                                            onChange={this.handleChange('productType')}\n                                            SelectProps={{\n                                                native: true,\n                                                MenuProps: {\n                                                    className: classes.menu,\n                                                },\n                                            }}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        >\n                                            {loadSpinnerData(this.prefSettings).map(option => (\n                                                <option key={option.value} value={option.value}>\n                                                    {option.label}\n                                                </option>\n                                            ))}\n                                        </TextField> : null\n                                    }\n\n                                </div>\n\n                                <div className=\"addDetailWrapper\">\n                                    <Button onClick={this.toggleMenu} variant=\"contained\" color=\"Orange\" className={classes.buttonMore}>\n                                        {this.state.showWarning ? 'More' : 'Less'}\n                                    </Button>\n                                    <Button disabled={this.state.addDisabled} onClick={this.searchByNum} variant=\"contained\" className={classes.button}>\n                                        Add\n                                    </Button>\n                                    <Button onClick={this.handleClickOpenClearDialog.bind()} variant=\"contained\" color=\"Orange\" className={classes.button_cancel}>\n                                        Clear\n                                    </Button>\n                                </div>\n\n                                <div className=\"addDetailWrapper\" style={{display:this.state.showWarning ? \"none\" : \"flex\"}}>\n                                    <div>\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Max Discount\"\n                                            variant=\"outlined\"\n                                            autoComplete=\"off\"\n                                            onKeyPress={isNumber}\n                                            type=\"number\"\n                                            onChange={this.handleChange('maxDiscount')}\n                                            value={this.state.maxDiscount}\n                                        />\n                                        <FormControlLabel\n                                            className={classes.margin_radio}\n                                            label=\"0.00\"\n                                            control={<Radio\n                                                style={{color: \"#048647\"}}\n                                                type=\"radio\"\n                                                value=\"1\"\n                                                checked={this.state.selectedValueMax === \"1\"}\n                                                onChange={this.radioChangeMax}\n                                            />}\n                                        />\n                                        <FormControlLabel\n                                            className={classes.margin_radio}\n                                            label=\"%\"\n                                            control={<Radio\n                                                style={{color: \"#048647\"}}\n                                                type=\"radio\"\n                                                value=\"0\"\n                                                checked={this.state.selectedValueMax === \"0\"}\n                                                onChange={this.radioChangeMax}\n                                            />}\n                                        />\n                                    </div>\n                                    <div>\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Default Discount\"\n                                            variant=\"outlined\"\n                                            autoComplete=\"off\"\n                                            onKeyPress={isNumber}\n                                            type=\"number\"\n                                            onChange={this.handleChange('defaultDiscount')}\n                                            value={this.state.defaultDiscount}\n                                        />\n                                        <FormControlLabel\n                                            className={classes.margin_radio}\n                                            label=\"0.00\"\n                                            control={<Radio\n                                                style={{color: \"#048647\"}}\n                                                type=\"radio\"\n                                                value=\"1\"\n                                                checked={this.state.selectedValueDefault === \"1\"}\n                                                onChange={this.radioChangeDefault}\n                                            />}\n                                        />\n                                        <FormControlLabel\n                                            className={classes.margin_radio}\n                                            label=\"%\"\n                                            control={<Radio\n                                                style={{color: \"#048647\"}}\n                                                type=\"radio\"\n                                                value=\"0\"\n                                                checked={this.state.selectedValueDefault === \"0\"}\n                                                onChange={this.radioChangeDefault}\n                                            />}\n                                        />\n                                    </div>\n                                </div>\n\n                                <div className=\"addDetailWrapper\" style={{display:this.state.showWarning ? \"none\" : \"flex\"}}>\n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Reorder Quantity\"\n                                            variant=\"outlined\"\n                                            autoComplete=\"off\"\n                                            onKeyPress={isNumber}\n                                            type=\"number\"\n                                            onChange={this.handleChange('reorderQuantity')}\n                                            value={this.state.reorderQuantity}\n                                        /> : null\n                                    }\n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            type=\"date\"\n                                            label=\"Expiry date\"\n                                            className={classes.margin_width}\n                                            variant=\"outlined\"\n                                            value={this.state.expiryDate}\n                                            onChange={this.handleChange('expiryDate')}\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                                        /> : null\n                                    }\n                                    <TextField\n                                        id=\"outlined-select-currency-native\"\n                                        select\n                                        label=\"Uom\"\n                                        className={classes.margin_width}\n                                        value={this.state.uom}\n                                        onChange={this.handleChange('uom')}\n                                        SelectProps={{\n                                            native: true,\n                                            MenuProps: {\n                                                className: classes.menu,\n                                            },\n                                        }}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    >\n                                        {UOM.map(option => (\n                                            <option key={option.value} value={option.value}>\n                                                {option.label}\n                                            </option>\n                                        ))}\n                                    </TextField>\n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <TextField\n                                            id=\"outlined-select-currency-native\"\n                                            select\n                                            label=\"Location\"\n                                            className={classes.margin_width}\n                                            InputLabelProps={{shrink: true,}}\n                                            value={this.state.location}\n                                            onChange={this.handleChange('location')}\n                                            SelectProps={{\n                                                native: true,\n                                                MenuProps: {\n                                                    className: classes.menu,\n                                                },\n                                            }}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        >\n                                            {this.state.locationArray && this.state.locationArray.map(option => (\n                                                <option key={option.location_id} value={option.location_id}>\n                                                    {option.location_desc}\n                                                </option>\n                                            ))}\n                                        </TextField> : null\n                                    }\n                                    {this.prefSettings.allowTax ?\n                                        <TextField\n                                            id=\"salesTax\"\n                                            select\n                                            label=\"Sales Tax\"\n                                            className={classes.margin_width}\n                                            InputLabelProps={{shrink: true,}}\n                                            value={this.state.taxDataSales}\n                                            onChange={this.handleChange('taxDataSales')}\n                                            SelectProps={{\n                                                native: true,\n                                                MenuProps: {\n                                                    className: classes.menu,\n                                                },\n                                            }}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        >\n                                            {this.prefSettings.CurrencyType !== 'cad' ?\n                                                <>\n                                                    {this.state.taxArray.map(option => (\n                                                        <option key={option.vatcode} value={option.vatcode}>\n                                                            {option.vatcode_desc + \"- \" + option.vat_rate + \"%\" }\n                                                        </option>\n                                                    ))}\n                                                </> :\n                                                <>\n                                                    {this.state.taxArray.map(option => (\n                                                        <option key={option.vatcode_group} value={option.vatcode_group}>\n                                                            {option.vatcode_group}\n                                                        </option>\n                                                    ))}\n                                                </> }\n                                        </TextField> : null\n                                    }\n                                    {this.prefSettings.allowTax ?\n                                        <TextField\n                                            id=\"purchaseTax\"\n                                            select\n                                            label=\"Purchase Tax\"\n                                            className={classes.margin_width}\n                                            InputLabelProps={{shrink: true,}}\n                                            value={this.state.taxDataPurchase}\n                                            onChange={this.handleChange('taxDataPurchase')}\n                                            SelectProps={{\n                                                native: true,\n                                                MenuProps: {\n                                                    className: classes.menu,\n                                                },\n                                            }}\n                                            margin=\"normal\"\n                                            variant=\"outlined\"\n                                        >\n                                            {this.prefSettings.CurrencyType !== 'cad' ?\n                                                <>\n                                                    {this.state.taxArray.map(option => (\n                                                        <option key={option.vatcode} value={option.vatcode}>\n                                                            {option.vatcode_desc + \"- \" + option.vat_rate + \"%\" }\n                                                        </option>\n                                                    ))}\n                                                </> :\n                                                <>\n                                                    {this.state.taxArray.map(option => (\n                                                        <option key={option.vatcode_group} value={option.vatcode_group}>\n                                                            {option.vatcode_group}\n                                                        </option>\n                                                    ))}\n                                                </> }\n                                        </TextField> : null\n                                    }\n                                    <TextField\n                                        className={classes.margin_width_detail}\n                                        label=\"Item Detail\"\n                                        variant=\"outlined\"\n                                        autoComplete=\"off\"\n                                        inputProps={{maxLength: 120}}\n                                        inputType=\"text\"\n                                        onChange={this.handleChange('itemDetail')}\n                                        value={this.state.itemDetail}\n                                    />\n                                    {this.prefSettings.subscription !== \"KOP\" ?\n                                        <TextField\n                                            id=\"mui-theme-provider-outlined-input\"\n                                            className={classes.margin_width}\n                                            label=\"Item code\"\n                                            variant=\"outlined\"\n                                            autoComplete=\"off\"\n                                            type=\"text\"\n                                            onChange={this.handleChange('itemCode')}\n                                            value={this.state.itemCode}\n                                        /> : null\n                                    }\n                                </div>\n                            </div>\n                        </MuiThemeProvider>\n\n                        <Dialog open={this.state.clearDialog}>\n                            <DialogTitle>\n                                {\"Are you sure clear this item?\"}\n                            </DialogTitle>\n                            <MuiThemeProvider theme={theme}>\n                                <DialogActions>\n                                    <Button onClick={this.handleCloseClearDialog}\n                                            style={{backgroundColor: \"#ececec\", color: \"black\"}}>\n                                        Cancel\n                                    </Button>\n                                    <Button autoFocus style={{backgroundColor: \"#106e4a\", color: \"white\"}} variant=\"contained\"\n                                            onClick={this.handleOk}>\n                                        Ok\n                                    </Button>\n                                </DialogActions>\n                            </MuiThemeProvider>\n                        </Dialog>\n                    </div>\n                </main>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(AddItem);\n","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport FacebookIcon from '@material-ui/icons/Facebook';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n        textTransform: 'none'\n    },\n}));\n\nexport default function LogIn() {\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" style={{maxWidth: 400}}>\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Log In\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"current-password\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Log In\n                    </Button>\n                    <Box style={{marginBottom: 10, textAlign: 'center'}}>or</Box>\n                    <Button\n                        variant=\"contained\"\n                        fullWidth\n                        style={{ backgroundColor: \"#4468B0\", color: \"#fff\", textTransform: 'none' }}\n                        startIcon={<FacebookIcon />}\n                    >\n                        Continue with Facebook\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n}\n","import React, { useState } from \"react\";\nimport \"react-phone-number-input/style.css\";\nimport PhoneInput from \"react-phone-number-input\";\n\nexport default function Test() {\n    const [value, setValue] = useState();\n\n    const configPhoneTextfield = {\n        fullWidth: true,\n        variant: \"outlined\",\n        id: \"phone_number\",\n        placeholder: \"Phone number\",\n        autoComplete: \"off\",\n        value: value,\n        defaultCountry: window.geoplugin_countryCode() || \"LK\",\n        international: true,\n        countryCallingCodeEditable: false,\n        onChange: setValue,\n        onBlur: onchange,\n    };\n\n    console.log(window.geoplugin_countryCode(), \"zzz\");\n    console.log(window.geoplugin_countryName(), \"zzz\");\n    console.log(window.geoplugin_currencyCode(), \"zzz\");\n    console.log(window.geoplugin_currencySymbol_UTF8(), \"zzz\");\n\n    return (\n        <div>\n            <PhoneInput {...configPhoneTextfield} style={{width: 400}} />\n        </div>\n    );\n}\n","import React from 'react';\nimport MainLayout from './Layouts';\nimport Home from './Views';\nimport AddItem from './Views/AddItem';\nimport Login from './Views/Login';\nimport Test from './Views/test';\n\nconst routes  = () => [\n  {\n    path: '',\n    element:  <MainLayout /> ,\n    children: [\n      { path: '/', element: <Home/> },\n      { path: '/additem', element: <AddItem/> },\n      { path: '/login', element: <Login/> },\n      { path: '/test', element: <Test/> },\n    ]\n  }\n];\n\nexport default routes;\n","import { createMuiTheme, colors } from '@material-ui/core';\nimport shadows from './shadows';\nimport typography from './typography';\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      dark: '#FAFAFA',\n      default: colors.common.white,\n      paper: colors.common.white\n    },\n    primary: {\n      main: '#106e4a'\n    },\n    secondary: {\n      // main: colors.indigo[500],\n      main: \"#dfe1e6\"\n    },\n    text: {\n      default: \"#fff\",\n      primary: \"#000\",\n      secondary: colors.blueGrey[600],\n    }\n  },\n  shadows,\n  typography\n});\n\nexport default theme;\n","// eslint-disable-next-line import/no-anonymous-default-export\nexport default [\n  'none',\n  '0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)'\n];\n","// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  h1: {\n    fontWeight: 500,\n    fontSize: 35,\n    letterSpacing: '-0.24px'\n  },\n  h2: {\n    fontWeight: 500,\n    fontSize: 29,\n    letterSpacing: '-0.24px'\n  },\n  h3: {\n    fontWeight: 500,\n    fontSize: 24,\n    letterSpacing: '-0.06px'\n  },\n  h4: {\n    fontWeight: 500,\n    fontSize: 20,\n    letterSpacing: '-0.06px'\n  },\n  h5: {\n    fontWeight: 500,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  h6: {\n    fontWeight: 500,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  overline: {\n    fontWeight: 500\n  }\n};\n\n// Roboto\", \"Helvetica\", \"Arial\", sans-serif\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { useRoutes } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport theme from './Theme';\n\nfunction App() {\n  const routing = useRoutes(routes());\n  return (\n    <ThemeProvider theme={theme}>\n      {routing}\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}